

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LightSwitchApplication
{
    #region Entities
    
    /// <summary>
    /// No Modeled Description Available
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    public sealed partial class ProcedureCategory : global::Microsoft.LightSwitch.Framework.Base.EntityObject<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass>
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new instance of the ProcedureCategory entity.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProcedureCategory()
            : this(null)
        {
        }
    
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProcedureCategory(global::Microsoft.LightSwitch.Framework.EntitySet<global::LightSwitchApplication.ProcedureCategory> entitySet)
            : base(entitySet)
        {
            global::LightSwitchApplication.ProcedureCategory.DetailsClass.Initialize(this);
        }
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProcedureCategory_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProcedureCategory_AllowSaveWithErrors(ref bool result);
    
        #endregion
    
        #region Private Properties
        
        /// <summary>
        /// Gets the Application object for this application.  The Application object provides access to active screens, methods to open screens and access to the current user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::Microsoft.LightSwitch.IApplication<global::LightSwitchApplication.DataWorkspace> Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Gets the containing data workspace.  The data workspace provides access to all data sources in the application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)this.Details.EntitySet.Details.DataService.Details.DataWorkspace;
            }
        }
        
        #endregion
    
        #region Public Properties
    
        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int procedureCategoryId
        {
            get
            {
                return global::LightSwitchApplication.ProcedureCategory.DetailsClass.GetValue(this, global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties.procedureCategoryId);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void procedureCategoryId_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void procedureCategoryId_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void procedureCategoryId_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string externalId
        {
            get
            {
                return global::LightSwitchApplication.ProcedureCategory.DetailsClass.GetValue(this, global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties.externalId);
            }
            set
            {
                global::LightSwitchApplication.ProcedureCategory.DetailsClass.SetValue(this, global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties.externalId, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void externalId_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void externalId_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void externalId_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool includeInMerge
        {
            get
            {
                return global::LightSwitchApplication.ProcedureCategory.DetailsClass.GetValue(this, global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties.includeInMerge);
            }
            set
            {
                global::LightSwitchApplication.ProcedureCategory.DetailsClass.SetValue(this, global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties.includeInMerge, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void includeInMerge_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void includeInMerge_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void includeInMerge_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string description
        {
            get
            {
                return global::LightSwitchApplication.ProcedureCategory.DetailsClass.GetValue(this, global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties.description);
            }
            set
            {
                global::LightSwitchApplication.ProcedureCategory.DetailsClass.SetValue(this, global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties.description, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void description_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void description_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void description_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.EntityCollection<global::LightSwitchApplication.Procedure> Procedures
        {
            get
            {
                return global::LightSwitchApplication.ProcedureCategory.DetailsClass.GetValue(this, global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties.Procedures);
            }
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.Procedure> ProceduresQuery
        {
            get
            {
                return global::LightSwitchApplication.ProcedureCategory.DetailsClass.GetQuery(this, global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties.Procedures);
            }
        }

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::LightSwitchApplication.ExternalSource ExternalSource
        {
            get
            {
                return global::LightSwitchApplication.ProcedureCategory.DetailsClass.GetValue(this, global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties.ExternalSource);
            }
            set
            {
                global::LightSwitchApplication.ProcedureCategory.DetailsClass.SetValue(this, global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties.ExternalSource, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExternalSource_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExternalSource_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExternalSource_Changed();

        #endregion
    
        #region Details Class
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass : global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<
                global::LightSwitchApplication.ProcedureCategory,
                global::LightSwitchApplication.ProcedureCategory.DetailsClass,
                global::LightSwitchApplication.ProcedureCategory.DetailsClass.IImplementation,
                global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySet,
                global::Microsoft.LightSwitch.Details.Framework.EntityCommandSet<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass>,
                global::Microsoft.LightSwitch.Details.Framework.EntityMethodSet<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass>>
        {
    
            static DetailsClass()
            {
                var initializeEntry = global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties.procedureCategoryId;
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass>.Entry
                __ProcedureCategoryEntry = new global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass>.Entry(
                    global::LightSwitchApplication.ProcedureCategory.DetailsClass.__ProcedureCategory_CreateNew,
                    global::LightSwitchApplication.ProcedureCategory.DetailsClass.__ProcedureCategory_Created,
                    global::LightSwitchApplication.ProcedureCategory.DetailsClass.__ProcedureCategory_AllowSaveWithErrors);
            private static global::LightSwitchApplication.ProcedureCategory __ProcedureCategory_CreateNew(global::Microsoft.LightSwitch.Framework.EntitySet<global::LightSwitchApplication.ProcedureCategory> es)
            {
                return new global::LightSwitchApplication.ProcedureCategory(es);
            }
            private static void __ProcedureCategory_Created(global::LightSwitchApplication.ProcedureCategory e)
            {
                e.ProcedureCategory_Created();
            }
            private static bool __ProcedureCategory_AllowSaveWithErrors(global::LightSwitchApplication.ProcedureCategory e)
            {
                bool result = false;
                e.ProcedureCategory_AllowSaveWithErrors(ref result);
                return result;
            }
    
            public DetailsClass() : base()
            {
            }
    
            public new global::Microsoft.LightSwitch.Details.Framework.EntityCommandSet<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass> Commands
            {
                get
                {
                    return base.Commands;
                }
            }
    
            public new global::Microsoft.LightSwitch.Details.Framework.EntityMethodSet<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass> Methods
            {
                get
                {
                    return base.Methods;
                }
            }
    
            public new global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }
    
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet : global::Microsoft.LightSwitch.Details.Framework.Base.EntityPropertySet<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass>
            {
    
                public PropertySet() : base()
                {
                }
    
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, int> procedureCategoryId
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties.procedureCategoryId) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, string> externalId
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties.externalId) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, bool> includeInMerge
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties.includeInMerge) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, bool>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, string> description
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties.description) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, global::LightSwitchApplication.Procedure> Procedures
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties.Procedures) as global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, global::LightSwitchApplication.Procedure>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, global::LightSwitchApplication.ExternalSource> ExternalSource
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties.ExternalSource) as global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, global::LightSwitchApplication.ExternalSource>;
                    }
                }
                
            }
    
            #pragma warning disable 109
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
            public interface IImplementation : global::Microsoft.LightSwitch.Internal.IEntityImplementation
            {
                new int procedureCategoryId { get; }
                new string externalId { get; set; }
                new bool includeInMerge { get; set; }
                new string description { get; set; }
                new global::System.Collections.IEnumerable Procedures { get; }
                new global::Microsoft.LightSwitch.Internal.IEntityImplementation ExternalSource { get; set; }
            }
            #pragma warning restore 109
    
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal class PropertySetProperties
            {
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, int>.Entry
                    procedureCategoryId = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, int>.Entry(
                        "procedureCategoryId",
                        global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties._procedureCategoryId_Stub,
                        global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties._procedureCategoryId_ComputeIsReadOnly,
                        global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties._procedureCategoryId_Validate,
                        global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties._procedureCategoryId_GetImplementationValue,
                        null,
                        global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties._procedureCategoryId_OnValueChanged);
                private static void _procedureCategoryId_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ProcedureCategory.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, int>.Data> c, global::LightSwitchApplication.ProcedureCategory.DetailsClass d, object sf)
                {
                    c(d, ref d._procedureCategoryId, sf);
                }
                private static bool _procedureCategoryId_ComputeIsReadOnly(global::LightSwitchApplication.ProcedureCategory e)
                {
                    bool result = false;
                    e.procedureCategoryId_IsReadOnly(ref result);
                    return result;
                }
                private static void _procedureCategoryId_Validate(global::LightSwitchApplication.ProcedureCategory e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.procedureCategoryId_Validate(r);
                }
                private static int _procedureCategoryId_GetImplementationValue(global::LightSwitchApplication.ProcedureCategory.DetailsClass d)
                {
                    return d.ImplementationEntity.procedureCategoryId;
                }
                private static void _procedureCategoryId_OnValueChanged(global::LightSwitchApplication.ProcedureCategory e)
                {
                    e.procedureCategoryId_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, string>.Entry
                    externalId = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, string>.Entry(
                        "externalId",
                        global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties._externalId_Stub,
                        global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties._externalId_ComputeIsReadOnly,
                        global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties._externalId_Validate,
                        global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties._externalId_GetImplementationValue,
                        global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties._externalId_SetImplementationValue,
                        global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties._externalId_OnValueChanged);
                private static void _externalId_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ProcedureCategory.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, string>.Data> c, global::LightSwitchApplication.ProcedureCategory.DetailsClass d, object sf)
                {
                    c(d, ref d._externalId, sf);
                }
                private static bool _externalId_ComputeIsReadOnly(global::LightSwitchApplication.ProcedureCategory e)
                {
                    bool result = false;
                    e.externalId_IsReadOnly(ref result);
                    return result;
                }
                private static void _externalId_Validate(global::LightSwitchApplication.ProcedureCategory e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.externalId_Validate(r);
                }
                private static string _externalId_GetImplementationValue(global::LightSwitchApplication.ProcedureCategory.DetailsClass d)
                {
                    return d.ImplementationEntity.externalId;
                }
                private static void _externalId_SetImplementationValue(global::LightSwitchApplication.ProcedureCategory.DetailsClass d, string v)
                {
                    d.ImplementationEntity.externalId = v;
                }
                private static void _externalId_OnValueChanged(global::LightSwitchApplication.ProcedureCategory e)
                {
                    e.externalId_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, bool>.Entry
                    includeInMerge = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, bool>.Entry(
                        "includeInMerge",
                        global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties._includeInMerge_Stub,
                        global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties._includeInMerge_ComputeIsReadOnly,
                        global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties._includeInMerge_Validate,
                        global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties._includeInMerge_GetImplementationValue,
                        global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties._includeInMerge_SetImplementationValue,
                        global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties._includeInMerge_OnValueChanged);
                private static void _includeInMerge_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ProcedureCategory.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, bool>.Data> c, global::LightSwitchApplication.ProcedureCategory.DetailsClass d, object sf)
                {
                    c(d, ref d._includeInMerge, sf);
                }
                private static bool _includeInMerge_ComputeIsReadOnly(global::LightSwitchApplication.ProcedureCategory e)
                {
                    bool result = false;
                    e.includeInMerge_IsReadOnly(ref result);
                    return result;
                }
                private static void _includeInMerge_Validate(global::LightSwitchApplication.ProcedureCategory e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.includeInMerge_Validate(r);
                }
                private static bool _includeInMerge_GetImplementationValue(global::LightSwitchApplication.ProcedureCategory.DetailsClass d)
                {
                    return d.ImplementationEntity.includeInMerge;
                }
                private static void _includeInMerge_SetImplementationValue(global::LightSwitchApplication.ProcedureCategory.DetailsClass d, bool v)
                {
                    d.ImplementationEntity.includeInMerge = v;
                }
                private static void _includeInMerge_OnValueChanged(global::LightSwitchApplication.ProcedureCategory e)
                {
                    e.includeInMerge_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, string>.Entry
                    description = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, string>.Entry(
                        "description",
                        global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties._description_Stub,
                        global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties._description_ComputeIsReadOnly,
                        global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties._description_Validate,
                        global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties._description_GetImplementationValue,
                        global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties._description_SetImplementationValue,
                        global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties._description_OnValueChanged);
                private static void _description_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ProcedureCategory.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, string>.Data> c, global::LightSwitchApplication.ProcedureCategory.DetailsClass d, object sf)
                {
                    c(d, ref d._description, sf);
                }
                private static bool _description_ComputeIsReadOnly(global::LightSwitchApplication.ProcedureCategory e)
                {
                    bool result = false;
                    e.description_IsReadOnly(ref result);
                    return result;
                }
                private static void _description_Validate(global::LightSwitchApplication.ProcedureCategory e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.description_Validate(r);
                }
                private static string _description_GetImplementationValue(global::LightSwitchApplication.ProcedureCategory.DetailsClass d)
                {
                    return d.ImplementationEntity.description;
                }
                private static void _description_SetImplementationValue(global::LightSwitchApplication.ProcedureCategory.DetailsClass d, string v)
                {
                    d.ImplementationEntity.description = v;
                }
                private static void _description_OnValueChanged(global::LightSwitchApplication.ProcedureCategory e)
                {
                    e.description_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, global::LightSwitchApplication.Procedure>.Entry
                    Procedures = new global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, global::LightSwitchApplication.Procedure>.Entry(
                        "Procedures",
                        global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties._Procedures_Stub,
                        global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties._Procedures_GetReferencedEntities,
                        global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties._Procedures_GetEntityCollection);
                private static void _Procedures_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ProcedureCategory.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, global::LightSwitchApplication.Procedure>.Data> c, global::LightSwitchApplication.ProcedureCategory.DetailsClass d, object sf)
                {
                    c(d, ref d._Procedures, sf);
                }
                private static global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Procedure> _Procedures_GetReferencedEntities(global::LightSwitchApplication.ProcedureCategory.DetailsClass d)
                {
                    return d.GetReferencedEntities<global::LightSwitchApplication.Procedure, global::LightSwitchApplication.Procedure.DetailsClass>(global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties.Procedures, ref d._Procedures);
                }
                private static global::System.Collections.IEnumerable _Procedures_GetEntityCollection(global::LightSwitchApplication.ProcedureCategory.DetailsClass d)
                {
                    return d.ImplementationEntity.Procedures;
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, global::LightSwitchApplication.ExternalSource>.Entry
                    ExternalSource = new global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, global::LightSwitchApplication.ExternalSource>.Entry(
                        "ExternalSource",
                        global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties._ExternalSource_Stub,
                        global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties._ExternalSource_ComputeIsReadOnly,
                        global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties._ExternalSource_Validate,
                        global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties._ExternalSource_GetCoreImplementationValue,
                        global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties._ExternalSource_GetImplementationValue,
                        global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties._ExternalSource_SetImplementationValue,
                        global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties._ExternalSource_Refresh,
                        global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties._ExternalSource_OnValueChanged);
                private static void _ExternalSource_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ProcedureCategory.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, global::LightSwitchApplication.ExternalSource>.Data> c, global::LightSwitchApplication.ProcedureCategory.DetailsClass d, object sf)
                {
                    c(d, ref d._ExternalSource, sf);
                }
                private static bool _ExternalSource_ComputeIsReadOnly(global::LightSwitchApplication.ProcedureCategory e)
                {
                    bool result = false;
                    e.ExternalSource_IsReadOnly(ref result);
                    return result;
                }
                private static void _ExternalSource_Validate(global::LightSwitchApplication.ProcedureCategory e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.ExternalSource_Validate(r);
                }
                private static global::Microsoft.LightSwitch.Internal.IEntityImplementation _ExternalSource_GetCoreImplementationValue(global::LightSwitchApplication.ProcedureCategory.DetailsClass d)
                {
                    return d.ImplementationEntity.ExternalSource;
                }
                private static global::LightSwitchApplication.ExternalSource _ExternalSource_GetImplementationValue(global::LightSwitchApplication.ProcedureCategory.DetailsClass d)
                {
                    return d.GetImplementationValue<global::LightSwitchApplication.ExternalSource, global::LightSwitchApplication.ExternalSource.DetailsClass>(global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties.ExternalSource, ref d._ExternalSource);
                }
                private static void _ExternalSource_SetImplementationValue(global::LightSwitchApplication.ProcedureCategory.DetailsClass d, global::LightSwitchApplication.ExternalSource v)
                {
                    d.SetImplementationValue(global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties.ExternalSource, ref d._ExternalSource, (i, ev) => i.ExternalSource = ev, v);
                }
                private static void _ExternalSource_Refresh(global::LightSwitchApplication.ProcedureCategory.DetailsClass d)
                {
                    d.RefreshNavigationProperty(global::LightSwitchApplication.ProcedureCategory.DetailsClass.PropertySetProperties.ExternalSource, ref d._ExternalSource);
                }
                private static void _ExternalSource_OnValueChanged(global::LightSwitchApplication.ProcedureCategory e)
                {
                    e.ExternalSource_Changed();
                }
    
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, int>.Data _procedureCategoryId;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, string>.Data _externalId;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, bool>.Data _includeInMerge;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, string>.Data _description;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, global::LightSwitchApplication.Procedure>.Data _Procedures;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.ProcedureCategory, global::LightSwitchApplication.ProcedureCategory.DetailsClass, global::LightSwitchApplication.ExternalSource>.Data _ExternalSource;
            
        }
    
        #endregion
    }
    
    #endregion
}
