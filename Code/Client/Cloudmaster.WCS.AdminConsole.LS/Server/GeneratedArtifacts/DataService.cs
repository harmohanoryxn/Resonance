//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LightSwitchApplication
{
    #region Data Services
    
    /// <summary>
    /// Provides members to query and update data in the WcsDB datasource.
    /// </summary>
    public sealed partial class WcsDBService
        : global::LightSwitchApplication.WcsDB
    {
        #region Constructors
    
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public WcsDBService() : base()
        {
        }
    
        #endregion
    
        #region Private Properties
        
        /// <summary>
        /// Gets the Application object for this application.  The Application object provides access to active screens, methods to open screens and access to the current user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Gets the containing data workspace.  The data workspace provides access to all data sources in the application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)this.Details.DataWorkspace;
            }
        }
        
        #endregion
    
        #region Server Interceptions Points
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configurations_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configurations_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configurations_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configurations_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configurations_Inserting(global::LightSwitchApplication.Configuration entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configurations_Inserted(global::LightSwitchApplication.Configuration entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configurations_Updating(global::LightSwitchApplication.Configuration entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configurations_Updated(global::LightSwitchApplication.Configuration entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configurations_Deleting(global::LightSwitchApplication.Configuration entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configurations_Deleted(global::LightSwitchApplication.Configuration entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configurations_Validate(global::LightSwitchApplication.Configuration entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationLocations_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationLocations_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationLocations_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationLocations_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationLocations_Inserting(global::LightSwitchApplication.ConfigurationLocation entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationLocations_Inserted(global::LightSwitchApplication.ConfigurationLocation entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationLocations_Updating(global::LightSwitchApplication.ConfigurationLocation entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationLocations_Updated(global::LightSwitchApplication.ConfigurationLocation entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationLocations_Deleting(global::LightSwitchApplication.ConfigurationLocation entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationLocations_Deleted(global::LightSwitchApplication.ConfigurationLocation entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationLocations_Validate(global::LightSwitchApplication.ConfigurationLocation entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationTypes_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationTypes_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationTypes_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationTypes_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationTypes_Inserting(global::LightSwitchApplication.ConfigurationType entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationTypes_Inserted(global::LightSwitchApplication.ConfigurationType entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationTypes_Updating(global::LightSwitchApplication.ConfigurationType entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationTypes_Updated(global::LightSwitchApplication.ConfigurationType entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationTypes_Deleting(global::LightSwitchApplication.ConfigurationType entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationTypes_Deleted(global::LightSwitchApplication.ConfigurationType entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationTypes_Validate(global::LightSwitchApplication.ConfigurationType entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Connections_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Connections_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Connections_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Connections_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Connections_Inserting(global::LightSwitchApplication.Connection entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Connections_Inserted(global::LightSwitchApplication.Connection entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Connections_Updating(global::LightSwitchApplication.Connection entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Connections_Updated(global::LightSwitchApplication.Connection entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Connections_Deleting(global::LightSwitchApplication.Connection entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Connections_Deleted(global::LightSwitchApplication.Connection entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Connections_Validate(global::LightSwitchApplication.Connection entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Devices_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Devices_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Devices_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Devices_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Devices_Inserting(global::LightSwitchApplication.Device entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Devices_Inserted(global::LightSwitchApplication.Device entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Devices_Updating(global::LightSwitchApplication.Device entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Devices_Updated(global::LightSwitchApplication.Device entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Devices_Deleting(global::LightSwitchApplication.Device entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Devices_Deleted(global::LightSwitchApplication.Device entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Devices_Validate(global::LightSwitchApplication.Device entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Locations_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Locations_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Locations_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Locations_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Locations_Inserting(global::LightSwitchApplication.Location entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Locations_Inserted(global::LightSwitchApplication.Location entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Locations_Updating(global::LightSwitchApplication.Location entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Locations_Updated(global::LightSwitchApplication.Location entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Locations_Deleting(global::LightSwitchApplication.Location entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Locations_Deleted(global::LightSwitchApplication.Location entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Locations_Validate(global::LightSwitchApplication.Location entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Logs_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Logs_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Logs_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Logs_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Logs_Inserting(global::LightSwitchApplication.Log entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Logs_Inserted(global::LightSwitchApplication.Log entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Logs_Updating(global::LightSwitchApplication.Log entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Logs_Updated(global::LightSwitchApplication.Log entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Logs_Deleting(global::LightSwitchApplication.Log entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Logs_Deleted(global::LightSwitchApplication.Log entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Logs_Validate(global::LightSwitchApplication.Log entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NotificationRules_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NotificationRules_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NotificationRules_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NotificationRules_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NotificationRules_Inserting(global::LightSwitchApplication.NotificationRule entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NotificationRules_Inserted(global::LightSwitchApplication.NotificationRule entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NotificationRules_Updating(global::LightSwitchApplication.NotificationRule entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NotificationRules_Updated(global::LightSwitchApplication.NotificationRule entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NotificationRules_Deleting(global::LightSwitchApplication.NotificationRule entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NotificationRules_Deleted(global::LightSwitchApplication.NotificationRule entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NotificationRules_Validate(global::LightSwitchApplication.NotificationRule entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Pins_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Pins_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Pins_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Pins_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Pins_Inserting(global::LightSwitchApplication.Pin entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Pins_Inserted(global::LightSwitchApplication.Pin entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Pins_Updating(global::LightSwitchApplication.Pin entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Pins_Updated(global::LightSwitchApplication.Pin entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Pins_Deleting(global::LightSwitchApplication.Pin entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Pins_Deleted(global::LightSwitchApplication.Pin entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Pins_Validate(global::LightSwitchApplication.Pin entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Procedures_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Procedures_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Procedures_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Procedures_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Procedures_Inserting(global::LightSwitchApplication.Procedure entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Procedures_Inserted(global::LightSwitchApplication.Procedure entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Procedures_Updating(global::LightSwitchApplication.Procedure entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Procedures_Updated(global::LightSwitchApplication.Procedure entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Procedures_Deleting(global::LightSwitchApplication.Procedure entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Procedures_Deleted(global::LightSwitchApplication.Procedure entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Procedures_Validate(global::LightSwitchApplication.Procedure entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProcedureCategories_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProcedureCategories_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProcedureCategories_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProcedureCategories_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProcedureCategories_Inserting(global::LightSwitchApplication.ProcedureCategory entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProcedureCategories_Inserted(global::LightSwitchApplication.ProcedureCategory entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProcedureCategories_Updating(global::LightSwitchApplication.ProcedureCategory entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProcedureCategories_Updated(global::LightSwitchApplication.ProcedureCategory entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProcedureCategories_Deleting(global::LightSwitchApplication.ProcedureCategory entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProcedureCategories_Deleted(global::LightSwitchApplication.ProcedureCategory entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProcedureCategories_Validate(global::LightSwitchApplication.ProcedureCategory entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExternalSources_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExternalSources_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExternalSources_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExternalSources_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExternalSources_Inserting(global::LightSwitchApplication.ExternalSource entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExternalSources_Inserted(global::LightSwitchApplication.ExternalSource entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExternalSources_Updating(global::LightSwitchApplication.ExternalSource entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExternalSources_Updated(global::LightSwitchApplication.ExternalSource entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExternalSources_Deleting(global::LightSwitchApplication.ExternalSource entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExternalSources_Deleted(global::LightSwitchApplication.ExternalSource entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExternalSources_Validate(global::LightSwitchApplication.ExternalSource entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_Executed();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configurations_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configurations_Single_Executing(global::System.Nullable<int> configurationId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configurations_Single_PreprocessQuery(global::System.Nullable<int> configurationId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configurations_Single_Executed(global::System.Nullable<int> configurationId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Configuration> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configurations_Single_ExecuteFailed(global::System.Nullable<int> configurationId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configurations_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configurations_SingleOrDefault_Executing(global::System.Nullable<int> configurationId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configurations_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> configurationId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configurations_SingleOrDefault_Executed(global::System.Nullable<int> configurationId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Configuration> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configurations_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> configurationId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configurations_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configurations_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configurations_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configurations_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Configuration> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configurations_All_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationLocations_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationLocations_Single_Executing(global::System.Nullable<int> configurationLocationId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationLocations_Single_PreprocessQuery(global::System.Nullable<int> configurationLocationId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.ConfigurationLocation> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationLocations_Single_Executed(global::System.Nullable<int> configurationLocationId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.ConfigurationLocation> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationLocations_Single_ExecuteFailed(global::System.Nullable<int> configurationLocationId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationLocations_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationLocations_SingleOrDefault_Executing(global::System.Nullable<int> configurationLocationId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationLocations_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> configurationLocationId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.ConfigurationLocation> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationLocations_SingleOrDefault_Executed(global::System.Nullable<int> configurationLocationId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.ConfigurationLocation> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationLocations_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> configurationLocationId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationLocations_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationLocations_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationLocations_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.ConfigurationLocation> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationLocations_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.ConfigurationLocation> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationLocations_All_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationTypes_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationTypes_Single_Executing(global::System.Nullable<int> ConfigurationTypeId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationTypes_Single_PreprocessQuery(global::System.Nullable<int> ConfigurationTypeId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.ConfigurationType> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationTypes_Single_Executed(global::System.Nullable<int> ConfigurationTypeId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.ConfigurationType> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationTypes_Single_ExecuteFailed(global::System.Nullable<int> ConfigurationTypeId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationTypes_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationTypes_SingleOrDefault_Executing(global::System.Nullable<int> ConfigurationTypeId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationTypes_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> ConfigurationTypeId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.ConfigurationType> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationTypes_SingleOrDefault_Executed(global::System.Nullable<int> ConfigurationTypeId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.ConfigurationType> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationTypes_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> ConfigurationTypeId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationTypes_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationTypes_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationTypes_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.ConfigurationType> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationTypes_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.ConfigurationType> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConfigurationTypes_All_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Connections_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Connections_Single_Executing(global::System.Nullable<int> connectionId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Connections_Single_PreprocessQuery(global::System.Nullable<int> connectionId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Connection> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Connections_Single_Executed(global::System.Nullable<int> connectionId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Connection> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Connections_Single_ExecuteFailed(global::System.Nullable<int> connectionId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Connections_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Connections_SingleOrDefault_Executing(global::System.Nullable<int> connectionId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Connections_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> connectionId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Connection> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Connections_SingleOrDefault_Executed(global::System.Nullable<int> connectionId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Connection> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Connections_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> connectionId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Connections_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Connections_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Connections_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.Connection> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Connections_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Connection> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Connections_All_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Devices_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Devices_Single_Executing(global::System.Nullable<int> deviceId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Devices_Single_PreprocessQuery(global::System.Nullable<int> deviceId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Device> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Devices_Single_Executed(global::System.Nullable<int> deviceId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Device> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Devices_Single_ExecuteFailed(global::System.Nullable<int> deviceId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Devices_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Devices_SingleOrDefault_Executing(global::System.Nullable<int> deviceId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Devices_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> deviceId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Device> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Devices_SingleOrDefault_Executed(global::System.Nullable<int> deviceId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Device> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Devices_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> deviceId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Devices_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Devices_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Devices_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.Device> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Devices_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Device> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Devices_All_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Locations_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Locations_Single_Executing(global::System.Nullable<int> locationId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Locations_Single_PreprocessQuery(global::System.Nullable<int> locationId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Location> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Locations_Single_Executed(global::System.Nullable<int> locationId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Location> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Locations_Single_ExecuteFailed(global::System.Nullable<int> locationId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Locations_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Locations_SingleOrDefault_Executing(global::System.Nullable<int> locationId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Locations_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> locationId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Location> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Locations_SingleOrDefault_Executed(global::System.Nullable<int> locationId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Location> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Locations_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> locationId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Locations_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Locations_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Locations_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.Location> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Locations_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Location> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Locations_All_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Logs_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Logs_Single_Executing(global::System.Nullable<int> logId, global::System.Nullable<global::System.DateTime> c_Date, string Thread, string Level, string Logger, string Message);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Logs_Single_PreprocessQuery(global::System.Nullable<int> logId, global::System.Nullable<global::System.DateTime> c_Date, string Thread, string Level, string Logger, string Message, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Log> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Logs_Single_Executed(global::System.Nullable<int> logId, global::System.Nullable<global::System.DateTime> c_Date, string Thread, string Level, string Logger, string Message, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Log> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Logs_Single_ExecuteFailed(global::System.Nullable<int> logId, global::System.Nullable<global::System.DateTime> c_Date, string Thread, string Level, string Logger, string Message, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Logs_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Logs_SingleOrDefault_Executing(global::System.Nullable<int> logId, global::System.Nullable<global::System.DateTime> c_Date, string Thread, string Level, string Logger, string Message);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Logs_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> logId, global::System.Nullable<global::System.DateTime> c_Date, string Thread, string Level, string Logger, string Message, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Log> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Logs_SingleOrDefault_Executed(global::System.Nullable<int> logId, global::System.Nullable<global::System.DateTime> c_Date, string Thread, string Level, string Logger, string Message, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Log> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Logs_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> logId, global::System.Nullable<global::System.DateTime> c_Date, string Thread, string Level, string Logger, string Message, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Logs_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Logs_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Logs_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.Log> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Logs_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Log> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Logs_All_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NotificationRules_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NotificationRules_Single_Executing(global::System.Nullable<int> notificationRuleId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NotificationRules_Single_PreprocessQuery(global::System.Nullable<int> notificationRuleId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.NotificationRule> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NotificationRules_Single_Executed(global::System.Nullable<int> notificationRuleId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.NotificationRule> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NotificationRules_Single_ExecuteFailed(global::System.Nullable<int> notificationRuleId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NotificationRules_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NotificationRules_SingleOrDefault_Executing(global::System.Nullable<int> notificationRuleId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NotificationRules_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> notificationRuleId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.NotificationRule> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NotificationRules_SingleOrDefault_Executed(global::System.Nullable<int> notificationRuleId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.NotificationRule> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NotificationRules_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> notificationRuleId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NotificationRules_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NotificationRules_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NotificationRules_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.NotificationRule> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NotificationRules_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.NotificationRule> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NotificationRules_All_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Pins_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Pins_Single_Executing(global::System.Nullable<int> pinId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Pins_Single_PreprocessQuery(global::System.Nullable<int> pinId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Pin> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Pins_Single_Executed(global::System.Nullable<int> pinId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Pin> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Pins_Single_ExecuteFailed(global::System.Nullable<int> pinId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Pins_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Pins_SingleOrDefault_Executing(global::System.Nullable<int> pinId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Pins_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> pinId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Pin> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Pins_SingleOrDefault_Executed(global::System.Nullable<int> pinId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Pin> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Pins_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> pinId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Pins_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Pins_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Pins_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.Pin> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Pins_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Pin> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Pins_All_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Procedures_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Procedures_Single_Executing(global::System.Nullable<int> procedureId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Procedures_Single_PreprocessQuery(global::System.Nullable<int> procedureId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Procedure> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Procedures_Single_Executed(global::System.Nullable<int> procedureId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Procedure> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Procedures_Single_ExecuteFailed(global::System.Nullable<int> procedureId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Procedures_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Procedures_SingleOrDefault_Executing(global::System.Nullable<int> procedureId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Procedures_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> procedureId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Procedure> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Procedures_SingleOrDefault_Executed(global::System.Nullable<int> procedureId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Procedure> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Procedures_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> procedureId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Procedures_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Procedures_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Procedures_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.Procedure> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Procedures_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Procedure> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Procedures_All_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProcedureCategories_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProcedureCategories_Single_Executing(global::System.Nullable<int> procedureCategoryId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProcedureCategories_Single_PreprocessQuery(global::System.Nullable<int> procedureCategoryId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.ProcedureCategory> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProcedureCategories_Single_Executed(global::System.Nullable<int> procedureCategoryId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.ProcedureCategory> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProcedureCategories_Single_ExecuteFailed(global::System.Nullable<int> procedureCategoryId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProcedureCategories_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProcedureCategories_SingleOrDefault_Executing(global::System.Nullable<int> procedureCategoryId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProcedureCategories_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> procedureCategoryId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.ProcedureCategory> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProcedureCategories_SingleOrDefault_Executed(global::System.Nullable<int> procedureCategoryId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.ProcedureCategory> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProcedureCategories_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> procedureCategoryId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProcedureCategories_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProcedureCategories_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProcedureCategories_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.ProcedureCategory> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProcedureCategories_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.ProcedureCategory> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProcedureCategories_All_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExternalSources_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExternalSources_Single_Executing(global::System.Nullable<int> externalSourceId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExternalSources_Single_PreprocessQuery(global::System.Nullable<int> externalSourceId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.ExternalSource> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExternalSources_Single_Executed(global::System.Nullable<int> externalSourceId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.ExternalSource> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExternalSources_Single_ExecuteFailed(global::System.Nullable<int> externalSourceId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExternalSources_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExternalSources_SingleOrDefault_Executing(global::System.Nullable<int> externalSourceId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExternalSources_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> externalSourceId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.ExternalSource> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExternalSources_SingleOrDefault_Executed(global::System.Nullable<int> externalSourceId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.ExternalSource> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExternalSources_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> externalSourceId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExternalSources_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExternalSources_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExternalSources_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.ExternalSource> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExternalSources_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.ExternalSource> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExternalSources_All_ExecuteFailed(global::System.Exception exception);
    
        #endregion
    
        #region Details Class
    
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        public static new class DetailsClass
        {
    
            static DetailsClass()
            {
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Configuration>
                __ConfigurationsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Configuration>(
                    "Configurations",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Configurations_CanInsert,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Configurations_CanUpdate,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Configurations_CanDelete,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Configurations_CanRead,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Configurations_Inserting,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Configurations_Inserted,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Configurations_Updating,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Configurations_Updated,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Configurations_Deleting,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Configurations_Deleted,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Configurations_Validate);
            private static bool __Configurations_CanInsert(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.Configurations_CanInsert(ref result);
                return result;
            }
            private static bool __Configurations_CanUpdate(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.Configurations_CanUpdate(ref result);
                return result;
            }
            private static bool __Configurations_CanDelete(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.Configurations_CanDelete(ref result);
                return result;
            }
            private static bool __Configurations_CanRead(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.Configurations_CanRead(ref result);
                return result;
            }
            private static void __Configurations_Inserting(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Configuration e)
            {
                d.Configurations_Inserting(e);
            }
            private static void __Configurations_Inserted(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Configuration e)
            {
                d.Configurations_Inserted(e);
            }
            private static void __Configurations_Updating(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Configuration e)
            {
                d.Configurations_Updating(e);
            }
            private static void __Configurations_Updated(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Configuration e)
            {
                d.Configurations_Updated(e);
            }
            private static void __Configurations_Deleting(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Configuration e)
            {
                d.Configurations_Deleting(e);
            }
            private static void __Configurations_Deleted(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Configuration e)
            {
                d.Configurations_Deleted(e);
            }
            private static void __Configurations_Validate(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Configuration e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Configurations_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.ConfigurationLocation>
                __ConfigurationLocationsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.ConfigurationLocation>(
                    "ConfigurationLocations",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationLocations_CanInsert,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationLocations_CanUpdate,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationLocations_CanDelete,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationLocations_CanRead,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationLocations_Inserting,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationLocations_Inserted,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationLocations_Updating,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationLocations_Updated,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationLocations_Deleting,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationLocations_Deleted,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationLocations_Validate);
            private static bool __ConfigurationLocations_CanInsert(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.ConfigurationLocations_CanInsert(ref result);
                return result;
            }
            private static bool __ConfigurationLocations_CanUpdate(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.ConfigurationLocations_CanUpdate(ref result);
                return result;
            }
            private static bool __ConfigurationLocations_CanDelete(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.ConfigurationLocations_CanDelete(ref result);
                return result;
            }
            private static bool __ConfigurationLocations_CanRead(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.ConfigurationLocations_CanRead(ref result);
                return result;
            }
            private static void __ConfigurationLocations_Inserting(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.ConfigurationLocation e)
            {
                d.ConfigurationLocations_Inserting(e);
            }
            private static void __ConfigurationLocations_Inserted(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.ConfigurationLocation e)
            {
                d.ConfigurationLocations_Inserted(e);
            }
            private static void __ConfigurationLocations_Updating(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.ConfigurationLocation e)
            {
                d.ConfigurationLocations_Updating(e);
            }
            private static void __ConfigurationLocations_Updated(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.ConfigurationLocation e)
            {
                d.ConfigurationLocations_Updated(e);
            }
            private static void __ConfigurationLocations_Deleting(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.ConfigurationLocation e)
            {
                d.ConfigurationLocations_Deleting(e);
            }
            private static void __ConfigurationLocations_Deleted(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.ConfigurationLocation e)
            {
                d.ConfigurationLocations_Deleted(e);
            }
            private static void __ConfigurationLocations_Validate(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.ConfigurationLocation e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.ConfigurationLocations_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.ConfigurationType>
                __ConfigurationTypesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.ConfigurationType>(
                    "ConfigurationTypes",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationTypes_CanInsert,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationTypes_CanUpdate,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationTypes_CanDelete,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationTypes_CanRead,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationTypes_Inserting,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationTypes_Inserted,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationTypes_Updating,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationTypes_Updated,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationTypes_Deleting,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationTypes_Deleted,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationTypes_Validate);
            private static bool __ConfigurationTypes_CanInsert(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.ConfigurationTypes_CanInsert(ref result);
                return result;
            }
            private static bool __ConfigurationTypes_CanUpdate(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.ConfigurationTypes_CanUpdate(ref result);
                return result;
            }
            private static bool __ConfigurationTypes_CanDelete(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.ConfigurationTypes_CanDelete(ref result);
                return result;
            }
            private static bool __ConfigurationTypes_CanRead(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.ConfigurationTypes_CanRead(ref result);
                return result;
            }
            private static void __ConfigurationTypes_Inserting(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.ConfigurationType e)
            {
                d.ConfigurationTypes_Inserting(e);
            }
            private static void __ConfigurationTypes_Inserted(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.ConfigurationType e)
            {
                d.ConfigurationTypes_Inserted(e);
            }
            private static void __ConfigurationTypes_Updating(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.ConfigurationType e)
            {
                d.ConfigurationTypes_Updating(e);
            }
            private static void __ConfigurationTypes_Updated(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.ConfigurationType e)
            {
                d.ConfigurationTypes_Updated(e);
            }
            private static void __ConfigurationTypes_Deleting(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.ConfigurationType e)
            {
                d.ConfigurationTypes_Deleting(e);
            }
            private static void __ConfigurationTypes_Deleted(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.ConfigurationType e)
            {
                d.ConfigurationTypes_Deleted(e);
            }
            private static void __ConfigurationTypes_Validate(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.ConfigurationType e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.ConfigurationTypes_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Connection>
                __ConnectionsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Connection>(
                    "Connections",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Connections_CanInsert,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Connections_CanUpdate,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Connections_CanDelete,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Connections_CanRead,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Connections_Inserting,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Connections_Inserted,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Connections_Updating,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Connections_Updated,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Connections_Deleting,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Connections_Deleted,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Connections_Validate);
            private static bool __Connections_CanInsert(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.Connections_CanInsert(ref result);
                return result;
            }
            private static bool __Connections_CanUpdate(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.Connections_CanUpdate(ref result);
                return result;
            }
            private static bool __Connections_CanDelete(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.Connections_CanDelete(ref result);
                return result;
            }
            private static bool __Connections_CanRead(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.Connections_CanRead(ref result);
                return result;
            }
            private static void __Connections_Inserting(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Connection e)
            {
                d.Connections_Inserting(e);
            }
            private static void __Connections_Inserted(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Connection e)
            {
                d.Connections_Inserted(e);
            }
            private static void __Connections_Updating(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Connection e)
            {
                d.Connections_Updating(e);
            }
            private static void __Connections_Updated(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Connection e)
            {
                d.Connections_Updated(e);
            }
            private static void __Connections_Deleting(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Connection e)
            {
                d.Connections_Deleting(e);
            }
            private static void __Connections_Deleted(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Connection e)
            {
                d.Connections_Deleted(e);
            }
            private static void __Connections_Validate(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Connection e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Connections_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Device>
                __DevicesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Device>(
                    "Devices",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Devices_CanInsert,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Devices_CanUpdate,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Devices_CanDelete,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Devices_CanRead,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Devices_Inserting,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Devices_Inserted,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Devices_Updating,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Devices_Updated,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Devices_Deleting,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Devices_Deleted,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Devices_Validate);
            private static bool __Devices_CanInsert(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.Devices_CanInsert(ref result);
                return result;
            }
            private static bool __Devices_CanUpdate(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.Devices_CanUpdate(ref result);
                return result;
            }
            private static bool __Devices_CanDelete(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.Devices_CanDelete(ref result);
                return result;
            }
            private static bool __Devices_CanRead(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.Devices_CanRead(ref result);
                return result;
            }
            private static void __Devices_Inserting(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Device e)
            {
                d.Devices_Inserting(e);
            }
            private static void __Devices_Inserted(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Device e)
            {
                d.Devices_Inserted(e);
            }
            private static void __Devices_Updating(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Device e)
            {
                d.Devices_Updating(e);
            }
            private static void __Devices_Updated(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Device e)
            {
                d.Devices_Updated(e);
            }
            private static void __Devices_Deleting(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Device e)
            {
                d.Devices_Deleting(e);
            }
            private static void __Devices_Deleted(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Device e)
            {
                d.Devices_Deleted(e);
            }
            private static void __Devices_Validate(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Device e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Devices_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Location>
                __LocationsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Location>(
                    "Locations",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Locations_CanInsert,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Locations_CanUpdate,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Locations_CanDelete,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Locations_CanRead,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Locations_Inserting,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Locations_Inserted,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Locations_Updating,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Locations_Updated,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Locations_Deleting,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Locations_Deleted,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Locations_Validate);
            private static bool __Locations_CanInsert(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.Locations_CanInsert(ref result);
                return result;
            }
            private static bool __Locations_CanUpdate(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.Locations_CanUpdate(ref result);
                return result;
            }
            private static bool __Locations_CanDelete(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.Locations_CanDelete(ref result);
                return result;
            }
            private static bool __Locations_CanRead(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.Locations_CanRead(ref result);
                return result;
            }
            private static void __Locations_Inserting(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Location e)
            {
                d.Locations_Inserting(e);
            }
            private static void __Locations_Inserted(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Location e)
            {
                d.Locations_Inserted(e);
            }
            private static void __Locations_Updating(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Location e)
            {
                d.Locations_Updating(e);
            }
            private static void __Locations_Updated(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Location e)
            {
                d.Locations_Updated(e);
            }
            private static void __Locations_Deleting(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Location e)
            {
                d.Locations_Deleting(e);
            }
            private static void __Locations_Deleted(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Location e)
            {
                d.Locations_Deleted(e);
            }
            private static void __Locations_Validate(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Location e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Locations_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Log>
                __LogsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Log>(
                    "Logs",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Logs_CanInsert,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Logs_CanUpdate,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Logs_CanDelete,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Logs_CanRead,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Logs_Inserting,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Logs_Inserted,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Logs_Updating,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Logs_Updated,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Logs_Deleting,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Logs_Deleted,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Logs_Validate);
            private static bool __Logs_CanInsert(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.Logs_CanInsert(ref result);
                return result;
            }
            private static bool __Logs_CanUpdate(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.Logs_CanUpdate(ref result);
                return result;
            }
            private static bool __Logs_CanDelete(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.Logs_CanDelete(ref result);
                return result;
            }
            private static bool __Logs_CanRead(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.Logs_CanRead(ref result);
                return result;
            }
            private static void __Logs_Inserting(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Log e)
            {
                d.Logs_Inserting(e);
            }
            private static void __Logs_Inserted(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Log e)
            {
                d.Logs_Inserted(e);
            }
            private static void __Logs_Updating(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Log e)
            {
                d.Logs_Updating(e);
            }
            private static void __Logs_Updated(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Log e)
            {
                d.Logs_Updated(e);
            }
            private static void __Logs_Deleting(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Log e)
            {
                d.Logs_Deleting(e);
            }
            private static void __Logs_Deleted(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Log e)
            {
                d.Logs_Deleted(e);
            }
            private static void __Logs_Validate(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Log e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Logs_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.NotificationRule>
                __NotificationRulesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.NotificationRule>(
                    "NotificationRules",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__NotificationRules_CanInsert,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__NotificationRules_CanUpdate,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__NotificationRules_CanDelete,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__NotificationRules_CanRead,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__NotificationRules_Inserting,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__NotificationRules_Inserted,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__NotificationRules_Updating,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__NotificationRules_Updated,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__NotificationRules_Deleting,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__NotificationRules_Deleted,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__NotificationRules_Validate);
            private static bool __NotificationRules_CanInsert(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.NotificationRules_CanInsert(ref result);
                return result;
            }
            private static bool __NotificationRules_CanUpdate(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.NotificationRules_CanUpdate(ref result);
                return result;
            }
            private static bool __NotificationRules_CanDelete(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.NotificationRules_CanDelete(ref result);
                return result;
            }
            private static bool __NotificationRules_CanRead(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.NotificationRules_CanRead(ref result);
                return result;
            }
            private static void __NotificationRules_Inserting(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.NotificationRule e)
            {
                d.NotificationRules_Inserting(e);
            }
            private static void __NotificationRules_Inserted(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.NotificationRule e)
            {
                d.NotificationRules_Inserted(e);
            }
            private static void __NotificationRules_Updating(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.NotificationRule e)
            {
                d.NotificationRules_Updating(e);
            }
            private static void __NotificationRules_Updated(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.NotificationRule e)
            {
                d.NotificationRules_Updated(e);
            }
            private static void __NotificationRules_Deleting(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.NotificationRule e)
            {
                d.NotificationRules_Deleting(e);
            }
            private static void __NotificationRules_Deleted(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.NotificationRule e)
            {
                d.NotificationRules_Deleted(e);
            }
            private static void __NotificationRules_Validate(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.NotificationRule e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.NotificationRules_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Pin>
                __PinsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Pin>(
                    "Pins",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Pins_CanInsert,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Pins_CanUpdate,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Pins_CanDelete,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Pins_CanRead,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Pins_Inserting,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Pins_Inserted,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Pins_Updating,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Pins_Updated,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Pins_Deleting,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Pins_Deleted,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Pins_Validate);
            private static bool __Pins_CanInsert(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.Pins_CanInsert(ref result);
                return result;
            }
            private static bool __Pins_CanUpdate(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.Pins_CanUpdate(ref result);
                return result;
            }
            private static bool __Pins_CanDelete(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.Pins_CanDelete(ref result);
                return result;
            }
            private static bool __Pins_CanRead(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.Pins_CanRead(ref result);
                return result;
            }
            private static void __Pins_Inserting(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Pin e)
            {
                d.Pins_Inserting(e);
            }
            private static void __Pins_Inserted(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Pin e)
            {
                d.Pins_Inserted(e);
            }
            private static void __Pins_Updating(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Pin e)
            {
                d.Pins_Updating(e);
            }
            private static void __Pins_Updated(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Pin e)
            {
                d.Pins_Updated(e);
            }
            private static void __Pins_Deleting(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Pin e)
            {
                d.Pins_Deleting(e);
            }
            private static void __Pins_Deleted(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Pin e)
            {
                d.Pins_Deleted(e);
            }
            private static void __Pins_Validate(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Pin e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Pins_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Procedure>
                __ProceduresEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Procedure>(
                    "Procedures",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Procedures_CanInsert,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Procedures_CanUpdate,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Procedures_CanDelete,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Procedures_CanRead,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Procedures_Inserting,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Procedures_Inserted,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Procedures_Updating,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Procedures_Updated,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Procedures_Deleting,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Procedures_Deleted,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Procedures_Validate);
            private static bool __Procedures_CanInsert(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.Procedures_CanInsert(ref result);
                return result;
            }
            private static bool __Procedures_CanUpdate(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.Procedures_CanUpdate(ref result);
                return result;
            }
            private static bool __Procedures_CanDelete(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.Procedures_CanDelete(ref result);
                return result;
            }
            private static bool __Procedures_CanRead(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.Procedures_CanRead(ref result);
                return result;
            }
            private static void __Procedures_Inserting(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Procedure e)
            {
                d.Procedures_Inserting(e);
            }
            private static void __Procedures_Inserted(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Procedure e)
            {
                d.Procedures_Inserted(e);
            }
            private static void __Procedures_Updating(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Procedure e)
            {
                d.Procedures_Updating(e);
            }
            private static void __Procedures_Updated(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Procedure e)
            {
                d.Procedures_Updated(e);
            }
            private static void __Procedures_Deleting(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Procedure e)
            {
                d.Procedures_Deleting(e);
            }
            private static void __Procedures_Deleted(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Procedure e)
            {
                d.Procedures_Deleted(e);
            }
            private static void __Procedures_Validate(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.Procedure e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Procedures_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.ProcedureCategory>
                __ProcedureCategoriesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.ProcedureCategory>(
                    "ProcedureCategories",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ProcedureCategories_CanInsert,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ProcedureCategories_CanUpdate,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ProcedureCategories_CanDelete,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ProcedureCategories_CanRead,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ProcedureCategories_Inserting,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ProcedureCategories_Inserted,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ProcedureCategories_Updating,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ProcedureCategories_Updated,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ProcedureCategories_Deleting,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ProcedureCategories_Deleted,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ProcedureCategories_Validate);
            private static bool __ProcedureCategories_CanInsert(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.ProcedureCategories_CanInsert(ref result);
                return result;
            }
            private static bool __ProcedureCategories_CanUpdate(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.ProcedureCategories_CanUpdate(ref result);
                return result;
            }
            private static bool __ProcedureCategories_CanDelete(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.ProcedureCategories_CanDelete(ref result);
                return result;
            }
            private static bool __ProcedureCategories_CanRead(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.ProcedureCategories_CanRead(ref result);
                return result;
            }
            private static void __ProcedureCategories_Inserting(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.ProcedureCategory e)
            {
                d.ProcedureCategories_Inserting(e);
            }
            private static void __ProcedureCategories_Inserted(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.ProcedureCategory e)
            {
                d.ProcedureCategories_Inserted(e);
            }
            private static void __ProcedureCategories_Updating(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.ProcedureCategory e)
            {
                d.ProcedureCategories_Updating(e);
            }
            private static void __ProcedureCategories_Updated(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.ProcedureCategory e)
            {
                d.ProcedureCategories_Updated(e);
            }
            private static void __ProcedureCategories_Deleting(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.ProcedureCategory e)
            {
                d.ProcedureCategories_Deleting(e);
            }
            private static void __ProcedureCategories_Deleted(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.ProcedureCategory e)
            {
                d.ProcedureCategories_Deleted(e);
            }
            private static void __ProcedureCategories_Validate(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.ProcedureCategory e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.ProcedureCategories_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.ExternalSource>
                __ExternalSourcesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.ExternalSource>(
                    "ExternalSources",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ExternalSources_CanInsert,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ExternalSources_CanUpdate,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ExternalSources_CanDelete,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ExternalSources_CanRead,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ExternalSources_Inserting,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ExternalSources_Inserted,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ExternalSources_Updating,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ExternalSources_Updated,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ExternalSources_Deleting,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ExternalSources_Deleted,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ExternalSources_Validate);
            private static bool __ExternalSources_CanInsert(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.ExternalSources_CanInsert(ref result);
                return result;
            }
            private static bool __ExternalSources_CanUpdate(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.ExternalSources_CanUpdate(ref result);
                return result;
            }
            private static bool __ExternalSources_CanDelete(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.ExternalSources_CanDelete(ref result);
                return result;
            }
            private static bool __ExternalSources_CanRead(global::LightSwitchApplication.WcsDBService d)
            {
                bool result = true;
                d.ExternalSources_CanRead(ref result);
                return result;
            }
            private static void __ExternalSources_Inserting(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.ExternalSource e)
            {
                d.ExternalSources_Inserting(e);
            }
            private static void __ExternalSources_Inserted(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.ExternalSource e)
            {
                d.ExternalSources_Inserted(e);
            }
            private static void __ExternalSources_Updating(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.ExternalSource e)
            {
                d.ExternalSources_Updating(e);
            }
            private static void __ExternalSources_Updated(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.ExternalSource e)
            {
                d.ExternalSources_Updated(e);
            }
            private static void __ExternalSources_Deleting(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.ExternalSource e)
            {
                d.ExternalSources_Deleting(e);
            }
            private static void __ExternalSources_Deleted(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.ExternalSource e)
            {
                d.ExternalSources_Deleted(e);
            }
            private static void __ExternalSources_Validate(global::LightSwitchApplication.WcsDBService d, global::LightSwitchApplication.ExternalSource e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.ExternalSources_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.OperationEntry<global::LightSwitchApplication.WcsDBService>
                __SaveChangesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.OperationEntry<global::LightSwitchApplication.WcsDBService>(
                    "SaveChanges",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__SaveChanges_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__SaveChanges_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__SaveChanges_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__SaveChanges_Failed);
            private static bool __SaveChanges_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.SaveChanges_CanExecute(ref r);
                return r;
            }
            private static void __SaveChanges_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.SaveChanges_Executing();
            }
            private static void __SaveChanges_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.SaveChanges_Executed();
            }
            private static void __SaveChanges_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.SaveChanges_ExecuteFailed(ex);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Configuration>
                __Configurations_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Configuration>(
                    "Configurations_Single",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Configurations_Single_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Configurations_Single_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Configurations_Single_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Configurations_Single_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Configurations_Single_PreprocessQuery);
            private static bool __Configurations_Single_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.Configurations_Single_CanExecute(ref r);
                return r;
            }
            private static void __Configurations_Single_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Configurations_Single_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Configurations_Single_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Configurations_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Configuration>)args[1]);
            }
            private static void __Configurations_Single_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.Configurations_Single_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Configurations_Single_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration>)args[1];
                d.Configurations_Single_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Configuration>
                __Configurations_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Configuration>(
                    "Configurations_SingleOrDefault",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Configurations_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Configurations_SingleOrDefault_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Configurations_SingleOrDefault_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Configurations_SingleOrDefault_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Configurations_SingleOrDefault_PreprocessQuery);
            private static bool __Configurations_SingleOrDefault_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.Configurations_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __Configurations_SingleOrDefault_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Configurations_SingleOrDefault_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Configurations_SingleOrDefault_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Configurations_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Configuration>)args[1]);
            }
            private static void __Configurations_SingleOrDefault_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.Configurations_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Configurations_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration>)args[1];
                d.Configurations_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Configuration>
                __Configurations_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Configuration>(
                    "Configurations_All",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Configurations_All_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Configurations_All_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Configurations_All_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Configurations_All_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Configurations_All_PreprocessQuery);
            private static bool __Configurations_All_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.Configurations_All_CanExecute(ref r);
                return r;
            }
            private static void __Configurations_All_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Configurations_All_Executing();
            }
            private static void __Configurations_All_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Configurations_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Configuration>)args[0]);
            }
            private static void __Configurations_All_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.Configurations_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __Configurations_All_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration>)args[0];
                d.Configurations_All_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.ConfigurationLocation>
                __ConfigurationLocations_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.ConfigurationLocation>(
                    "ConfigurationLocations_Single",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationLocations_Single_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationLocations_Single_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationLocations_Single_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationLocations_Single_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationLocations_Single_PreprocessQuery);
            private static bool __ConfigurationLocations_Single_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.ConfigurationLocations_Single_CanExecute(ref r);
                return r;
            }
            private static void __ConfigurationLocations_Single_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.ConfigurationLocations_Single_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __ConfigurationLocations_Single_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.ConfigurationLocations_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.ConfigurationLocation>)args[1]);
            }
            private static void __ConfigurationLocations_Single_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.ConfigurationLocations_Single_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __ConfigurationLocations_Single_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.ConfigurationLocation> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.ConfigurationLocation>)args[1];
                d.ConfigurationLocations_Single_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.ConfigurationLocation>
                __ConfigurationLocations_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.ConfigurationLocation>(
                    "ConfigurationLocations_SingleOrDefault",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationLocations_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationLocations_SingleOrDefault_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationLocations_SingleOrDefault_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationLocations_SingleOrDefault_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationLocations_SingleOrDefault_PreprocessQuery);
            private static bool __ConfigurationLocations_SingleOrDefault_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.ConfigurationLocations_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __ConfigurationLocations_SingleOrDefault_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.ConfigurationLocations_SingleOrDefault_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __ConfigurationLocations_SingleOrDefault_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.ConfigurationLocations_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.ConfigurationLocation>)args[1]);
            }
            private static void __ConfigurationLocations_SingleOrDefault_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.ConfigurationLocations_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __ConfigurationLocations_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.ConfigurationLocation> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.ConfigurationLocation>)args[1];
                d.ConfigurationLocations_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.ConfigurationLocation>
                __ConfigurationLocations_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.ConfigurationLocation>(
                    "ConfigurationLocations_All",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationLocations_All_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationLocations_All_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationLocations_All_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationLocations_All_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationLocations_All_PreprocessQuery);
            private static bool __ConfigurationLocations_All_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.ConfigurationLocations_All_CanExecute(ref r);
                return r;
            }
            private static void __ConfigurationLocations_All_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.ConfigurationLocations_All_Executing();
            }
            private static void __ConfigurationLocations_All_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.ConfigurationLocations_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.ConfigurationLocation>)args[0]);
            }
            private static void __ConfigurationLocations_All_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.ConfigurationLocations_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __ConfigurationLocations_All_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.ConfigurationLocation> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.ConfigurationLocation>)args[0];
                d.ConfigurationLocations_All_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.ConfigurationType>
                __ConfigurationTypes_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.ConfigurationType>(
                    "ConfigurationTypes_Single",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationTypes_Single_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationTypes_Single_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationTypes_Single_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationTypes_Single_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationTypes_Single_PreprocessQuery);
            private static bool __ConfigurationTypes_Single_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.ConfigurationTypes_Single_CanExecute(ref r);
                return r;
            }
            private static void __ConfigurationTypes_Single_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.ConfigurationTypes_Single_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __ConfigurationTypes_Single_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.ConfigurationTypes_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.ConfigurationType>)args[1]);
            }
            private static void __ConfigurationTypes_Single_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.ConfigurationTypes_Single_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __ConfigurationTypes_Single_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.ConfigurationType> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.ConfigurationType>)args[1];
                d.ConfigurationTypes_Single_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.ConfigurationType>
                __ConfigurationTypes_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.ConfigurationType>(
                    "ConfigurationTypes_SingleOrDefault",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationTypes_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationTypes_SingleOrDefault_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationTypes_SingleOrDefault_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationTypes_SingleOrDefault_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationTypes_SingleOrDefault_PreprocessQuery);
            private static bool __ConfigurationTypes_SingleOrDefault_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.ConfigurationTypes_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __ConfigurationTypes_SingleOrDefault_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.ConfigurationTypes_SingleOrDefault_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __ConfigurationTypes_SingleOrDefault_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.ConfigurationTypes_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.ConfigurationType>)args[1]);
            }
            private static void __ConfigurationTypes_SingleOrDefault_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.ConfigurationTypes_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __ConfigurationTypes_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.ConfigurationType> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.ConfigurationType>)args[1];
                d.ConfigurationTypes_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.ConfigurationType>
                __ConfigurationTypes_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.ConfigurationType>(
                    "ConfigurationTypes_All",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationTypes_All_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationTypes_All_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationTypes_All_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationTypes_All_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ConfigurationTypes_All_PreprocessQuery);
            private static bool __ConfigurationTypes_All_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.ConfigurationTypes_All_CanExecute(ref r);
                return r;
            }
            private static void __ConfigurationTypes_All_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.ConfigurationTypes_All_Executing();
            }
            private static void __ConfigurationTypes_All_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.ConfigurationTypes_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.ConfigurationType>)args[0]);
            }
            private static void __ConfigurationTypes_All_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.ConfigurationTypes_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __ConfigurationTypes_All_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.ConfigurationType> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.ConfigurationType>)args[0];
                d.ConfigurationTypes_All_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Connection>
                __Connections_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Connection>(
                    "Connections_Single",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Connections_Single_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Connections_Single_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Connections_Single_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Connections_Single_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Connections_Single_PreprocessQuery);
            private static bool __Connections_Single_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.Connections_Single_CanExecute(ref r);
                return r;
            }
            private static void __Connections_Single_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Connections_Single_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Connections_Single_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Connections_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Connection>)args[1]);
            }
            private static void __Connections_Single_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.Connections_Single_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Connections_Single_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Connection> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Connection>)args[1];
                d.Connections_Single_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Connection>
                __Connections_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Connection>(
                    "Connections_SingleOrDefault",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Connections_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Connections_SingleOrDefault_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Connections_SingleOrDefault_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Connections_SingleOrDefault_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Connections_SingleOrDefault_PreprocessQuery);
            private static bool __Connections_SingleOrDefault_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.Connections_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __Connections_SingleOrDefault_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Connections_SingleOrDefault_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Connections_SingleOrDefault_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Connections_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Connection>)args[1]);
            }
            private static void __Connections_SingleOrDefault_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.Connections_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Connections_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Connection> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Connection>)args[1];
                d.Connections_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Connection>
                __Connections_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Connection>(
                    "Connections_All",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Connections_All_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Connections_All_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Connections_All_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Connections_All_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Connections_All_PreprocessQuery);
            private static bool __Connections_All_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.Connections_All_CanExecute(ref r);
                return r;
            }
            private static void __Connections_All_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Connections_All_Executing();
            }
            private static void __Connections_All_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Connections_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Connection>)args[0]);
            }
            private static void __Connections_All_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.Connections_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __Connections_All_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Connection> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Connection>)args[0];
                d.Connections_All_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Device>
                __Devices_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Device>(
                    "Devices_Single",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Devices_Single_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Devices_Single_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Devices_Single_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Devices_Single_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Devices_Single_PreprocessQuery);
            private static bool __Devices_Single_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.Devices_Single_CanExecute(ref r);
                return r;
            }
            private static void __Devices_Single_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Devices_Single_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Devices_Single_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Devices_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Device>)args[1]);
            }
            private static void __Devices_Single_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.Devices_Single_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Devices_Single_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Device> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Device>)args[1];
                d.Devices_Single_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Device>
                __Devices_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Device>(
                    "Devices_SingleOrDefault",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Devices_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Devices_SingleOrDefault_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Devices_SingleOrDefault_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Devices_SingleOrDefault_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Devices_SingleOrDefault_PreprocessQuery);
            private static bool __Devices_SingleOrDefault_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.Devices_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __Devices_SingleOrDefault_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Devices_SingleOrDefault_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Devices_SingleOrDefault_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Devices_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Device>)args[1]);
            }
            private static void __Devices_SingleOrDefault_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.Devices_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Devices_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Device> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Device>)args[1];
                d.Devices_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Device>
                __Devices_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Device>(
                    "Devices_All",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Devices_All_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Devices_All_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Devices_All_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Devices_All_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Devices_All_PreprocessQuery);
            private static bool __Devices_All_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.Devices_All_CanExecute(ref r);
                return r;
            }
            private static void __Devices_All_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Devices_All_Executing();
            }
            private static void __Devices_All_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Devices_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Device>)args[0]);
            }
            private static void __Devices_All_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.Devices_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __Devices_All_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Device> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Device>)args[0];
                d.Devices_All_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Location>
                __Locations_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Location>(
                    "Locations_Single",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Locations_Single_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Locations_Single_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Locations_Single_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Locations_Single_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Locations_Single_PreprocessQuery);
            private static bool __Locations_Single_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.Locations_Single_CanExecute(ref r);
                return r;
            }
            private static void __Locations_Single_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Locations_Single_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Locations_Single_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Locations_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Location>)args[1]);
            }
            private static void __Locations_Single_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.Locations_Single_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Locations_Single_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Location> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Location>)args[1];
                d.Locations_Single_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Location>
                __Locations_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Location>(
                    "Locations_SingleOrDefault",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Locations_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Locations_SingleOrDefault_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Locations_SingleOrDefault_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Locations_SingleOrDefault_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Locations_SingleOrDefault_PreprocessQuery);
            private static bool __Locations_SingleOrDefault_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.Locations_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __Locations_SingleOrDefault_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Locations_SingleOrDefault_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Locations_SingleOrDefault_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Locations_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Location>)args[1]);
            }
            private static void __Locations_SingleOrDefault_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.Locations_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Locations_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Location> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Location>)args[1];
                d.Locations_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Location>
                __Locations_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Location>(
                    "Locations_All",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Locations_All_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Locations_All_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Locations_All_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Locations_All_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Locations_All_PreprocessQuery);
            private static bool __Locations_All_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.Locations_All_CanExecute(ref r);
                return r;
            }
            private static void __Locations_All_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Locations_All_Executing();
            }
            private static void __Locations_All_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Locations_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Location>)args[0]);
            }
            private static void __Locations_All_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.Locations_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __Locations_All_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Location> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Location>)args[0];
                d.Locations_All_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Log>
                __Logs_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Log>(
                    "Logs_Single",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Logs_Single_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Logs_Single_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Logs_Single_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Logs_Single_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Logs_Single_PreprocessQuery);
            private static bool __Logs_Single_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.Logs_Single_CanExecute(ref r);
                return r;
            }
            private static void __Logs_Single_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Logs_Single_Executing((global::System.Nullable<int>)args[0], (global::System.Nullable<global::System.DateTime>)args[1], (string)args[2], (string)args[3], (string)args[4], (string)args[5]);
            }
            private static void __Logs_Single_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Logs_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Nullable<global::System.DateTime>)args[1], (string)args[2], (string)args[3], (string)args[4], (string)args[5], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Log>)args[6]);
            }
            private static void __Logs_Single_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.Logs_Single_ExecuteFailed((global::System.Nullable<int>)args[0], (global::System.Nullable<global::System.DateTime>)args[1], (string)args[2], (string)args[3], (string)args[4], (string)args[5], ex);
            }
            private static global::System.Linq.IQueryable __Logs_Single_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Log> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Log>)args[6];
                d.Logs_Single_PreprocessQuery((global::System.Nullable<int>)args[0], (global::System.Nullable<global::System.DateTime>)args[1], (string)args[2], (string)args[3], (string)args[4], (string)args[5], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Log>
                __Logs_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Log>(
                    "Logs_SingleOrDefault",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Logs_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Logs_SingleOrDefault_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Logs_SingleOrDefault_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Logs_SingleOrDefault_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Logs_SingleOrDefault_PreprocessQuery);
            private static bool __Logs_SingleOrDefault_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.Logs_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __Logs_SingleOrDefault_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Logs_SingleOrDefault_Executing((global::System.Nullable<int>)args[0], (global::System.Nullable<global::System.DateTime>)args[1], (string)args[2], (string)args[3], (string)args[4], (string)args[5]);
            }
            private static void __Logs_SingleOrDefault_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Logs_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Nullable<global::System.DateTime>)args[1], (string)args[2], (string)args[3], (string)args[4], (string)args[5], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Log>)args[6]);
            }
            private static void __Logs_SingleOrDefault_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.Logs_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], (global::System.Nullable<global::System.DateTime>)args[1], (string)args[2], (string)args[3], (string)args[4], (string)args[5], ex);
            }
            private static global::System.Linq.IQueryable __Logs_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Log> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Log>)args[6];
                d.Logs_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], (global::System.Nullable<global::System.DateTime>)args[1], (string)args[2], (string)args[3], (string)args[4], (string)args[5], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Log>
                __Logs_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Log>(
                    "Logs_All",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Logs_All_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Logs_All_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Logs_All_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Logs_All_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Logs_All_PreprocessQuery);
            private static bool __Logs_All_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.Logs_All_CanExecute(ref r);
                return r;
            }
            private static void __Logs_All_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Logs_All_Executing();
            }
            private static void __Logs_All_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Logs_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Log>)args[0]);
            }
            private static void __Logs_All_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.Logs_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __Logs_All_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Log> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Log>)args[0];
                d.Logs_All_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.NotificationRule>
                __NotificationRules_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.NotificationRule>(
                    "NotificationRules_Single",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__NotificationRules_Single_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__NotificationRules_Single_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__NotificationRules_Single_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__NotificationRules_Single_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__NotificationRules_Single_PreprocessQuery);
            private static bool __NotificationRules_Single_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.NotificationRules_Single_CanExecute(ref r);
                return r;
            }
            private static void __NotificationRules_Single_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.NotificationRules_Single_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __NotificationRules_Single_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.NotificationRules_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.NotificationRule>)args[1]);
            }
            private static void __NotificationRules_Single_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.NotificationRules_Single_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __NotificationRules_Single_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.NotificationRule> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.NotificationRule>)args[1];
                d.NotificationRules_Single_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.NotificationRule>
                __NotificationRules_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.NotificationRule>(
                    "NotificationRules_SingleOrDefault",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__NotificationRules_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__NotificationRules_SingleOrDefault_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__NotificationRules_SingleOrDefault_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__NotificationRules_SingleOrDefault_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__NotificationRules_SingleOrDefault_PreprocessQuery);
            private static bool __NotificationRules_SingleOrDefault_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.NotificationRules_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __NotificationRules_SingleOrDefault_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.NotificationRules_SingleOrDefault_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __NotificationRules_SingleOrDefault_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.NotificationRules_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.NotificationRule>)args[1]);
            }
            private static void __NotificationRules_SingleOrDefault_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.NotificationRules_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __NotificationRules_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.NotificationRule> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.NotificationRule>)args[1];
                d.NotificationRules_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.NotificationRule>
                __NotificationRules_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.NotificationRule>(
                    "NotificationRules_All",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__NotificationRules_All_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__NotificationRules_All_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__NotificationRules_All_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__NotificationRules_All_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__NotificationRules_All_PreprocessQuery);
            private static bool __NotificationRules_All_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.NotificationRules_All_CanExecute(ref r);
                return r;
            }
            private static void __NotificationRules_All_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.NotificationRules_All_Executing();
            }
            private static void __NotificationRules_All_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.NotificationRules_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.NotificationRule>)args[0]);
            }
            private static void __NotificationRules_All_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.NotificationRules_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __NotificationRules_All_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.NotificationRule> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.NotificationRule>)args[0];
                d.NotificationRules_All_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Pin>
                __Pins_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Pin>(
                    "Pins_Single",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Pins_Single_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Pins_Single_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Pins_Single_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Pins_Single_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Pins_Single_PreprocessQuery);
            private static bool __Pins_Single_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.Pins_Single_CanExecute(ref r);
                return r;
            }
            private static void __Pins_Single_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Pins_Single_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Pins_Single_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Pins_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Pin>)args[1]);
            }
            private static void __Pins_Single_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.Pins_Single_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Pins_Single_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Pin> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Pin>)args[1];
                d.Pins_Single_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Pin>
                __Pins_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Pin>(
                    "Pins_SingleOrDefault",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Pins_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Pins_SingleOrDefault_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Pins_SingleOrDefault_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Pins_SingleOrDefault_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Pins_SingleOrDefault_PreprocessQuery);
            private static bool __Pins_SingleOrDefault_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.Pins_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __Pins_SingleOrDefault_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Pins_SingleOrDefault_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Pins_SingleOrDefault_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Pins_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Pin>)args[1]);
            }
            private static void __Pins_SingleOrDefault_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.Pins_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Pins_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Pin> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Pin>)args[1];
                d.Pins_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Pin>
                __Pins_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Pin>(
                    "Pins_All",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Pins_All_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Pins_All_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Pins_All_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Pins_All_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Pins_All_PreprocessQuery);
            private static bool __Pins_All_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.Pins_All_CanExecute(ref r);
                return r;
            }
            private static void __Pins_All_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Pins_All_Executing();
            }
            private static void __Pins_All_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Pins_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Pin>)args[0]);
            }
            private static void __Pins_All_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.Pins_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __Pins_All_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Pin> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Pin>)args[0];
                d.Pins_All_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Procedure>
                __Procedures_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Procedure>(
                    "Procedures_Single",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Procedures_Single_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Procedures_Single_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Procedures_Single_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Procedures_Single_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Procedures_Single_PreprocessQuery);
            private static bool __Procedures_Single_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.Procedures_Single_CanExecute(ref r);
                return r;
            }
            private static void __Procedures_Single_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Procedures_Single_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Procedures_Single_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Procedures_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Procedure>)args[1]);
            }
            private static void __Procedures_Single_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.Procedures_Single_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Procedures_Single_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Procedure> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Procedure>)args[1];
                d.Procedures_Single_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Procedure>
                __Procedures_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Procedure>(
                    "Procedures_SingleOrDefault",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Procedures_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Procedures_SingleOrDefault_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Procedures_SingleOrDefault_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Procedures_SingleOrDefault_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Procedures_SingleOrDefault_PreprocessQuery);
            private static bool __Procedures_SingleOrDefault_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.Procedures_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __Procedures_SingleOrDefault_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Procedures_SingleOrDefault_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Procedures_SingleOrDefault_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Procedures_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Procedure>)args[1]);
            }
            private static void __Procedures_SingleOrDefault_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.Procedures_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Procedures_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Procedure> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Procedure>)args[1];
                d.Procedures_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Procedure>
                __Procedures_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.Procedure>(
                    "Procedures_All",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Procedures_All_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Procedures_All_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Procedures_All_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Procedures_All_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__Procedures_All_PreprocessQuery);
            private static bool __Procedures_All_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.Procedures_All_CanExecute(ref r);
                return r;
            }
            private static void __Procedures_All_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Procedures_All_Executing();
            }
            private static void __Procedures_All_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.Procedures_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Procedure>)args[0]);
            }
            private static void __Procedures_All_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.Procedures_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __Procedures_All_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Procedure> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Procedure>)args[0];
                d.Procedures_All_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.ProcedureCategory>
                __ProcedureCategories_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.ProcedureCategory>(
                    "ProcedureCategories_Single",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ProcedureCategories_Single_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ProcedureCategories_Single_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ProcedureCategories_Single_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ProcedureCategories_Single_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ProcedureCategories_Single_PreprocessQuery);
            private static bool __ProcedureCategories_Single_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.ProcedureCategories_Single_CanExecute(ref r);
                return r;
            }
            private static void __ProcedureCategories_Single_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.ProcedureCategories_Single_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __ProcedureCategories_Single_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.ProcedureCategories_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.ProcedureCategory>)args[1]);
            }
            private static void __ProcedureCategories_Single_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.ProcedureCategories_Single_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __ProcedureCategories_Single_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.ProcedureCategory> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.ProcedureCategory>)args[1];
                d.ProcedureCategories_Single_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.ProcedureCategory>
                __ProcedureCategories_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.ProcedureCategory>(
                    "ProcedureCategories_SingleOrDefault",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ProcedureCategories_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ProcedureCategories_SingleOrDefault_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ProcedureCategories_SingleOrDefault_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ProcedureCategories_SingleOrDefault_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ProcedureCategories_SingleOrDefault_PreprocessQuery);
            private static bool __ProcedureCategories_SingleOrDefault_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.ProcedureCategories_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __ProcedureCategories_SingleOrDefault_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.ProcedureCategories_SingleOrDefault_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __ProcedureCategories_SingleOrDefault_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.ProcedureCategories_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.ProcedureCategory>)args[1]);
            }
            private static void __ProcedureCategories_SingleOrDefault_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.ProcedureCategories_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __ProcedureCategories_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.ProcedureCategory> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.ProcedureCategory>)args[1];
                d.ProcedureCategories_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.ProcedureCategory>
                __ProcedureCategories_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.ProcedureCategory>(
                    "ProcedureCategories_All",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ProcedureCategories_All_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ProcedureCategories_All_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ProcedureCategories_All_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ProcedureCategories_All_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ProcedureCategories_All_PreprocessQuery);
            private static bool __ProcedureCategories_All_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.ProcedureCategories_All_CanExecute(ref r);
                return r;
            }
            private static void __ProcedureCategories_All_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.ProcedureCategories_All_Executing();
            }
            private static void __ProcedureCategories_All_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.ProcedureCategories_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.ProcedureCategory>)args[0]);
            }
            private static void __ProcedureCategories_All_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.ProcedureCategories_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __ProcedureCategories_All_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.ProcedureCategory> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.ProcedureCategory>)args[0];
                d.ProcedureCategories_All_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.ExternalSource>
                __ExternalSources_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.ExternalSource>(
                    "ExternalSources_Single",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ExternalSources_Single_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ExternalSources_Single_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ExternalSources_Single_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ExternalSources_Single_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ExternalSources_Single_PreprocessQuery);
            private static bool __ExternalSources_Single_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.ExternalSources_Single_CanExecute(ref r);
                return r;
            }
            private static void __ExternalSources_Single_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.ExternalSources_Single_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __ExternalSources_Single_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.ExternalSources_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.ExternalSource>)args[1]);
            }
            private static void __ExternalSources_Single_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.ExternalSources_Single_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __ExternalSources_Single_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.ExternalSource> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.ExternalSource>)args[1];
                d.ExternalSources_Single_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.ExternalSource>
                __ExternalSources_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.ExternalSource>(
                    "ExternalSources_SingleOrDefault",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ExternalSources_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ExternalSources_SingleOrDefault_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ExternalSources_SingleOrDefault_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ExternalSources_SingleOrDefault_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ExternalSources_SingleOrDefault_PreprocessQuery);
            private static bool __ExternalSources_SingleOrDefault_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.ExternalSources_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __ExternalSources_SingleOrDefault_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.ExternalSources_SingleOrDefault_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __ExternalSources_SingleOrDefault_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.ExternalSources_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.ExternalSource>)args[1]);
            }
            private static void __ExternalSources_SingleOrDefault_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.ExternalSources_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __ExternalSources_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.ExternalSource> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.ExternalSource>)args[1];
                d.ExternalSources_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.ExternalSource>
                __ExternalSources_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.WcsDBService, global::LightSwitchApplication.ExternalSource>(
                    "ExternalSources_All",
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ExternalSources_All_CanExecute,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ExternalSources_All_Executing,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ExternalSources_All_Executed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ExternalSources_All_Failed,
                    global::LightSwitchApplication.WcsDBService.DetailsClass.__ExternalSources_All_PreprocessQuery);
            private static bool __ExternalSources_All_CanExecute(global::LightSwitchApplication.WcsDBService d, bool r)
            {
                d.ExternalSources_All_CanExecute(ref r);
                return r;
            }
            private static void __ExternalSources_All_Executing(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.ExternalSources_All_Executing();
            }
            private static void __ExternalSources_All_Executed(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                d.ExternalSources_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.ExternalSource>)args[0]);
            }
            private static void __ExternalSources_All_Failed(global::LightSwitchApplication.WcsDBService d, object[] args, global::System.Exception ex)
            {
                d.ExternalSources_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __ExternalSources_All_PreprocessQuery(global::LightSwitchApplication.WcsDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.ExternalSource> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.ExternalSource>)args[0];
                d.ExternalSources_All_PreprocessQuery(ref query);
                return query;
            }
    
        }
    
        #endregion
    }
    
    #endregion
}
