//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LightSwitchApplication.Implementation
{
    
    #region Configuration
    [global::System.Runtime.Serialization.DataContract(Namespace = "http://schemas.datacontract.org/2004/07/WcsDB.Implementation")]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class Configuration :
        global::System.ServiceModel.DomainServices.Client.Entity,
        global::LightSwitchApplication.Configuration.DetailsClass.IImplementation
    {
        public override object GetIdentity()
        {
            if (this.__host != null && this.__host.IsNewlyAdded)
            {
                return null;
            }
    
            return this._configurationId;
        }
        [global::System.ComponentModel.DataAnnotations.Key()]
        [global::System.ComponentModel.DataAnnotations.Editable(false, AllowInitialValue = true)]
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public int configurationId
        {
            get
            {
                return this._configurationId;
            }
            set
            {
                if (this._configurationId != value)
                {
                    this.ValidateProperty("configurationId", value);
                    this._configurationId = value;
                    this.RaisePropertyChanged("configurationId");
                }
            }
        }
        private int _configurationId;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                if (this._name != value)
                {
                    this.RaiseDataMemberChanging("name");
                    this.ValidateProperty("name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("name");
                }
            }
        }
        private string _name;
        
        [global::System.ComponentModel.DataAnnotations.Association("FK_ConfigurationConfigurationLocation", "configurationId", "configurationId")]
        [global::System.Xml.Serialization.XmlIgnore()]
        public global::System.ServiceModel.DomainServices.Client.EntityCollection<ConfigurationLocation> ConfigurationLocations
        {
            get
            {
                if (this._ConfigurationLocations == null)
                {
                    this._ConfigurationLocations = new global::System.ServiceModel.DomainServices.Client.EntityCollection<global::LightSwitchApplication.Implementation.ConfigurationLocation>(this, "ConfigurationLocations", this.FilterConfigurationLocations, this.AttachConfigurationLocations, this.DetachConfigurationLocations);
                }
                return this._ConfigurationLocations;
            }
        }
        private global::System.ServiceModel.DomainServices.Client.EntityCollection<global::LightSwitchApplication.Implementation.ConfigurationLocation> _ConfigurationLocations;
        private void AttachConfigurationLocations(global::LightSwitchApplication.Implementation.ConfigurationLocation entity)
        {
            entity.Configuration = this;
        }
        private void DetachConfigurationLocations(global::LightSwitchApplication.Implementation.ConfigurationLocation entity)
        {
            entity.Configuration = null;
        }
        private bool FilterConfigurationLocations(global::LightSwitchApplication.Implementation.ConfigurationLocation entity)
        {
            return global::System.Object.Equals(entity.configurationId, this.configurationId);
        }
        global::System.Collections.IEnumerable global::LightSwitchApplication.Configuration.DetailsClass.IImplementation.ConfigurationLocations
        {
            get
            {
                return this.ConfigurationLocations;
            }
        }
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public int ConfigurationType_ConfigurationTypeId
        {
            get
            {
                return this._ConfigurationType_ConfigurationTypeId;
            }
            set
            {
                if (this._ConfigurationType_ConfigurationTypeId != value)
                {
                    this.RaiseDataMemberChanging("ConfigurationType_ConfigurationTypeId");
                    this.ValidateProperty("ConfigurationType_ConfigurationTypeId", value);
                    this._ConfigurationType_ConfigurationTypeId = value;
                    this.RaiseDataMemberChanged("ConfigurationType_ConfigurationTypeId");
                }
            }
        }
        private int _ConfigurationType_ConfigurationTypeId;
        
        [global::System.ComponentModel.DataAnnotations.Association("FK_ConfigurationConfigurationType", "ConfigurationType_ConfigurationTypeId", "ConfigurationTypeId", IsForeignKey = true)]
        [global::System.Xml.Serialization.XmlIgnore()]
        public global::LightSwitchApplication.Implementation.ConfigurationType ConfigurationType
        {
            get
            {
                if (this._ConfigurationType == null)
                {
                    this._ConfigurationType = new global::System.ServiceModel.DomainServices.Client.EntityRef<global::LightSwitchApplication.Implementation.ConfigurationType>(this, "ConfigurationType", this.FilterConfigurationType);
                }
                return this._ConfigurationType.Entity;
            }
            set
            {
                ConfigurationType previous = this.ConfigurationType;
                if (previous != value)
                {
                    this.ValidateProperty("ConfigurationType", value);
                    if (previous != null)
                    {
                        this._ConfigurationType.Entity = null;
                        previous.Configurations.Remove(this);
                    }
                    if (value != null)
                    {
                        this.ConfigurationType_ConfigurationTypeId = value.ConfigurationTypeId;
                    }
                    else
                    {
                        this.ConfigurationType_ConfigurationTypeId = default(int);
                    }
                    this._ConfigurationType.Entity = value;
                    if (value != null)
                    {
                        value.Configurations.Add(this);
                    }
                    this.RaisePropertyChanged("ConfigurationType");
                }
            }
        }
        private global::System.ServiceModel.DomainServices.Client.EntityRef<global::LightSwitchApplication.Implementation.ConfigurationType> _ConfigurationType;
        private bool FilterConfigurationType(global::LightSwitchApplication.Implementation.ConfigurationType entity)
        {
            return global::System.Object.Equals(entity.ConfigurationTypeId, this.ConfigurationType_ConfigurationTypeId);
        }
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Configuration.DetailsClass.IImplementation.ConfigurationType
        {
            get
            {
                return this.ConfigurationType;
            }
            set
            {
                this.ConfigurationType = (global::LightSwitchApplication.Implementation.ConfigurationType)value;
            }
        }
        
        [global::System.ComponentModel.DataAnnotations.Association("FK_ConfigurationDevice", "configurationId", "configurationId")]
        [global::System.Xml.Serialization.XmlIgnore()]
        public global::System.ServiceModel.DomainServices.Client.EntityCollection<Device> Devices
        {
            get
            {
                if (this._Devices == null)
                {
                    this._Devices = new global::System.ServiceModel.DomainServices.Client.EntityCollection<global::LightSwitchApplication.Implementation.Device>(this, "Devices", this.FilterDevices, this.AttachDevices, this.DetachDevices);
                }
                return this._Devices;
            }
        }
        private global::System.ServiceModel.DomainServices.Client.EntityCollection<global::LightSwitchApplication.Implementation.Device> _Devices;
        private void AttachDevices(global::LightSwitchApplication.Implementation.Device entity)
        {
            entity.Configuration = this;
        }
        private void DetachDevices(global::LightSwitchApplication.Implementation.Device entity)
        {
            entity.Configuration = null;
        }
        private bool FilterDevices(global::LightSwitchApplication.Implementation.Device entity)
        {
            return global::System.Object.Equals(entity.configurationId, this.configurationId);
        }
        global::System.Collections.IEnumerable global::LightSwitchApplication.Configuration.DetailsClass.IImplementation.Devices
        {
            get
            {
                return this.Devices;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(global::System.ComponentModel.PropertyChangedEventArgs e)
        {
            base.OnPropertyChanged(e);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(e.PropertyName);
            }
        }
        #endregion
    }
    #endregion
    
    #region ConfigurationLocation
    [global::System.Runtime.Serialization.DataContract(Namespace = "http://schemas.datacontract.org/2004/07/WcsDB.Implementation")]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class ConfigurationLocation :
        global::System.ServiceModel.DomainServices.Client.Entity,
        global::LightSwitchApplication.ConfigurationLocation.DetailsClass.IImplementation
    {
        public override object GetIdentity()
        {
            if (this.__host != null && this.__host.IsNewlyAdded)
            {
                return null;
            }
    
            return this._configurationLocationId;
        }
        [global::System.ComponentModel.DataAnnotations.Key()]
        [global::System.ComponentModel.DataAnnotations.Editable(false, AllowInitialValue = true)]
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public int configurationLocationId
        {
            get
            {
                return this._configurationLocationId;
            }
            set
            {
                if (this._configurationLocationId != value)
                {
                    this.ValidateProperty("configurationLocationId", value);
                    this._configurationLocationId = value;
                    this.RaisePropertyChanged("configurationLocationId");
                }
            }
        }
        private int _configurationLocationId;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public bool isDefault
        {
            get
            {
                return this._isDefault;
            }
            set
            {
                if (this._isDefault != value)
                {
                    this.RaiseDataMemberChanging("isDefault");
                    this.ValidateProperty("isDefault", value);
                    this._isDefault = value;
                    this.RaiseDataMemberChanged("isDefault");
                }
            }
        }
        private bool _isDefault;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public int configurationId
        {
            get
            {
                return this._configurationId;
            }
            set
            {
                if (this._configurationId != value)
                {
                    this.RaiseDataMemberChanging("configurationId");
                    this.ValidateProperty("configurationId", value);
                    this._configurationId = value;
                    this.RaiseDataMemberChanged("configurationId");
                }
            }
        }
        private int _configurationId;
        
        [global::System.ComponentModel.DataAnnotations.Association("FK_ConfigurationConfigurationLocation", "configurationId", "configurationId", IsForeignKey = true)]
        [global::System.Xml.Serialization.XmlIgnore()]
        public global::LightSwitchApplication.Implementation.Configuration Configuration
        {
            get
            {
                if (this._Configuration == null)
                {
                    this._Configuration = new global::System.ServiceModel.DomainServices.Client.EntityRef<global::LightSwitchApplication.Implementation.Configuration>(this, "Configuration", this.FilterConfiguration);
                }
                return this._Configuration.Entity;
            }
            set
            {
                Configuration previous = this.Configuration;
                if (previous != value)
                {
                    this.ValidateProperty("Configuration", value);
                    if (previous != null)
                    {
                        this._Configuration.Entity = null;
                        previous.ConfigurationLocations.Remove(this);
                    }
                    if (value != null)
                    {
                        this.configurationId = value.configurationId;
                    }
                    else
                    {
                        this.configurationId = default(int);
                    }
                    this._Configuration.Entity = value;
                    if (value != null)
                    {
                        value.ConfigurationLocations.Add(this);
                    }
                    this.RaisePropertyChanged("Configuration");
                }
            }
        }
        private global::System.ServiceModel.DomainServices.Client.EntityRef<global::LightSwitchApplication.Implementation.Configuration> _Configuration;
        private bool FilterConfiguration(global::LightSwitchApplication.Implementation.Configuration entity)
        {
            return global::System.Object.Equals(entity.configurationId, this.configurationId);
        }
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.ConfigurationLocation.DetailsClass.IImplementation.Configuration
        {
            get
            {
                return this.Configuration;
            }
            set
            {
                this.Configuration = (global::LightSwitchApplication.Implementation.Configuration)value;
            }
        }
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public int locationId
        {
            get
            {
                return this._locationId;
            }
            set
            {
                if (this._locationId != value)
                {
                    this.RaiseDataMemberChanging("locationId");
                    this.ValidateProperty("locationId", value);
                    this._locationId = value;
                    this.RaiseDataMemberChanged("locationId");
                }
            }
        }
        private int _locationId;
        
        [global::System.ComponentModel.DataAnnotations.Association("FK_LocationConfigurationLocation", "locationId", "locationId", IsForeignKey = true)]
        [global::System.Xml.Serialization.XmlIgnore()]
        public global::LightSwitchApplication.Implementation.Location Location
        {
            get
            {
                if (this._Location == null)
                {
                    this._Location = new global::System.ServiceModel.DomainServices.Client.EntityRef<global::LightSwitchApplication.Implementation.Location>(this, "Location", this.FilterLocation);
                }
                return this._Location.Entity;
            }
            set
            {
                Location previous = this.Location;
                if (previous != value)
                {
                    this.ValidateProperty("Location", value);
                    if (previous != null)
                    {
                        this._Location.Entity = null;
                        previous.ConfigurationLocations.Remove(this);
                    }
                    if (value != null)
                    {
                        this.locationId = value.locationId;
                    }
                    else
                    {
                        this.locationId = default(int);
                    }
                    this._Location.Entity = value;
                    if (value != null)
                    {
                        value.ConfigurationLocations.Add(this);
                    }
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        private global::System.ServiceModel.DomainServices.Client.EntityRef<global::LightSwitchApplication.Implementation.Location> _Location;
        private bool FilterLocation(global::LightSwitchApplication.Implementation.Location entity)
        {
            return global::System.Object.Equals(entity.locationId, this.locationId);
        }
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.ConfigurationLocation.DetailsClass.IImplementation.Location
        {
            get
            {
                return this.Location;
            }
            set
            {
                this.Location = (global::LightSwitchApplication.Implementation.Location)value;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(global::System.ComponentModel.PropertyChangedEventArgs e)
        {
            base.OnPropertyChanged(e);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(e.PropertyName);
            }
        }
        #endregion
    }
    #endregion
    
    #region ConfigurationType
    [global::System.Runtime.Serialization.DataContract(Namespace = "http://schemas.datacontract.org/2004/07/WcsDB.Implementation")]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class ConfigurationType :
        global::System.ServiceModel.DomainServices.Client.Entity,
        global::LightSwitchApplication.ConfigurationType.DetailsClass.IImplementation
    {
        public override object GetIdentity()
        {
            if (this.__host != null && this.__host.IsNewlyAdded)
            {
                return null;
            }
    
            return this._ConfigurationTypeId;
        }
        [global::System.ComponentModel.DataAnnotations.Key()]
        [global::System.ComponentModel.DataAnnotations.Editable(false, AllowInitialValue = true)]
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public int ConfigurationTypeId
        {
            get
            {
                return this._ConfigurationTypeId;
            }
            set
            {
                if (this._ConfigurationTypeId != value)
                {
                    this.ValidateProperty("ConfigurationTypeId", value);
                    this._ConfigurationTypeId = value;
                    this.RaisePropertyChanged("ConfigurationTypeId");
                }
            }
        }
        private int _ConfigurationTypeId;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                if (this._name != value)
                {
                    this.RaiseDataMemberChanging("name");
                    this.ValidateProperty("name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("name");
                }
            }
        }
        private string _name;
        
        [global::System.ComponentModel.DataAnnotations.Association("FK_ConfigurationConfigurationType", "ConfigurationTypeId", "ConfigurationType_ConfigurationTypeId")]
        [global::System.Xml.Serialization.XmlIgnore()]
        public global::System.ServiceModel.DomainServices.Client.EntityCollection<Configuration> Configurations
        {
            get
            {
                if (this._Configurations == null)
                {
                    this._Configurations = new global::System.ServiceModel.DomainServices.Client.EntityCollection<global::LightSwitchApplication.Implementation.Configuration>(this, "Configurations", this.FilterConfigurations, this.AttachConfigurations, this.DetachConfigurations);
                }
                return this._Configurations;
            }
        }
        private global::System.ServiceModel.DomainServices.Client.EntityCollection<global::LightSwitchApplication.Implementation.Configuration> _Configurations;
        private void AttachConfigurations(global::LightSwitchApplication.Implementation.Configuration entity)
        {
            entity.ConfigurationType = this;
        }
        private void DetachConfigurations(global::LightSwitchApplication.Implementation.Configuration entity)
        {
            entity.ConfigurationType = null;
        }
        private bool FilterConfigurations(global::LightSwitchApplication.Implementation.Configuration entity)
        {
            return global::System.Object.Equals(entity.ConfigurationType_ConfigurationTypeId, this.ConfigurationTypeId);
        }
        global::System.Collections.IEnumerable global::LightSwitchApplication.ConfigurationType.DetailsClass.IImplementation.Configurations
        {
            get
            {
                return this.Configurations;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(global::System.ComponentModel.PropertyChangedEventArgs e)
        {
            base.OnPropertyChanged(e);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(e.PropertyName);
            }
        }
        #endregion
    }
    #endregion
    
    #region Connection
    [global::System.Runtime.Serialization.DataContract(Namespace = "http://schemas.datacontract.org/2004/07/WcsDB.Implementation")]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class Connection :
        global::System.ServiceModel.DomainServices.Client.Entity,
        global::LightSwitchApplication.Connection.DetailsClass.IImplementation
    {
        public override object GetIdentity()
        {
            if (this.__host != null && this.__host.IsNewlyAdded)
            {
                return null;
            }
    
            return this._connectionId;
        }
        [global::System.ComponentModel.DataAnnotations.Key()]
        [global::System.ComponentModel.DataAnnotations.Editable(false, AllowInitialValue = true)]
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public int connectionId
        {
            get
            {
                return this._connectionId;
            }
            set
            {
                if (this._connectionId != value)
                {
                    this.ValidateProperty("connectionId", value);
                    this._connectionId = value;
                    this.RaisePropertyChanged("connectionId");
                }
            }
        }
        private int _connectionId;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public global::System.DateTime connectionTime
        {
            get
            {
                return this._connectionTime;
            }
            set
            {
                if (this._connectionTime != value)
                {
                    this.RaiseDataMemberChanging("connectionTime");
                    this.ValidateProperty("connectionTime", value);
                    this._connectionTime = value;
                    this.RaiseDataMemberChanged("connectionTime");
                }
            }
        }
        private global::System.DateTime _connectionTime;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public int deviceId
        {
            get
            {
                return this._deviceId;
            }
            set
            {
                if (this._deviceId != value)
                {
                    this.RaiseDataMemberChanging("deviceId");
                    this.ValidateProperty("deviceId", value);
                    this._deviceId = value;
                    this.RaiseDataMemberChanged("deviceId");
                }
            }
        }
        private int _deviceId;
        
        [global::System.ComponentModel.DataAnnotations.Association("FK_DeviceConnection", "deviceId", "deviceId", IsForeignKey = true)]
        [global::System.Xml.Serialization.XmlIgnore()]
        public global::LightSwitchApplication.Implementation.Device Device
        {
            get
            {
                if (this._Device == null)
                {
                    this._Device = new global::System.ServiceModel.DomainServices.Client.EntityRef<global::LightSwitchApplication.Implementation.Device>(this, "Device", this.FilterDevice);
                }
                return this._Device.Entity;
            }
            set
            {
                Device previous = this.Device;
                if (previous != value)
                {
                    this.ValidateProperty("Device", value);
                    if (previous != null)
                    {
                        this._Device.Entity = null;
                        previous.Connections.Remove(this);
                    }
                    if (value != null)
                    {
                        this.deviceId = value.deviceId;
                    }
                    else
                    {
                        this.deviceId = default(int);
                    }
                    this._Device.Entity = value;
                    if (value != null)
                    {
                        value.Connections.Add(this);
                    }
                    this.RaisePropertyChanged("Device");
                }
            }
        }
        private global::System.ServiceModel.DomainServices.Client.EntityRef<global::LightSwitchApplication.Implementation.Device> _Device;
        private bool FilterDevice(global::LightSwitchApplication.Implementation.Device entity)
        {
            return global::System.Object.Equals(entity.deviceId, this.deviceId);
        }
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Connection.DetailsClass.IImplementation.Device
        {
            get
            {
                return this.Device;
            }
            set
            {
                this.Device = (global::LightSwitchApplication.Implementation.Device)value;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(global::System.ComponentModel.PropertyChangedEventArgs e)
        {
            base.OnPropertyChanged(e);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(e.PropertyName);
            }
        }
        #endregion
    }
    #endregion
    
    #region Device
    [global::System.Runtime.Serialization.DataContract(Namespace = "http://schemas.datacontract.org/2004/07/WcsDB.Implementation")]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class Device :
        global::System.ServiceModel.DomainServices.Client.Entity,
        global::LightSwitchApplication.Device.DetailsClass.IImplementation
    {
        public override object GetIdentity()
        {
            if (this.__host != null && this.__host.IsNewlyAdded)
            {
                return null;
            }
    
            return this._deviceId;
        }
        [global::System.ComponentModel.DataAnnotations.Key()]
        [global::System.ComponentModel.DataAnnotations.Editable(false, AllowInitialValue = true)]
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public int deviceId
        {
            get
            {
                return this._deviceId;
            }
            set
            {
                if (this._deviceId != value)
                {
                    this.ValidateProperty("deviceId", value);
                    this._deviceId = value;
                    this.RaisePropertyChanged("deviceId");
                }
            }
        }
        private int _deviceId;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                if (this._name != value)
                {
                    this.RaiseDataMemberChanging("name");
                    this.ValidateProperty("name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("name");
                }
            }
        }
        private string _name;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public string os
        {
            get
            {
                return this._os;
            }
            set
            {
                if (this._os != value)
                {
                    this.RaiseDataMemberChanging("os");
                    this.ValidateProperty("os", value);
                    this._os = value;
                    this.RaiseDataMemberChanged("os");
                }
            }
        }
        private string _os;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public string description
        {
            get
            {
                return this._description;
            }
            set
            {
                if (this._description != value)
                {
                    this.RaiseDataMemberChanging("description");
                    this.ValidateProperty("description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("description");
                }
            }
        }
        private string _description;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public string ipAddress
        {
            get
            {
                return this._ipAddress;
            }
            set
            {
                if (this._ipAddress != value)
                {
                    this.RaiseDataMemberChanging("ipAddress");
                    this.ValidateProperty("ipAddress", value);
                    this._ipAddress = value;
                    this.RaiseDataMemberChanged("ipAddress");
                }
            }
        }
        private string _ipAddress;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public global::System.Nullable<global::System.DateTime> lastConnection
        {
            get
            {
                return this._lastConnection;
            }
            set
            {
                if (this._lastConnection != value)
                {
                    this.RaiseDataMemberChanging("lastConnection");
                    this.ValidateProperty("lastConnection", value);
                    this._lastConnection = value;
                    this.RaiseDataMemberChanged("lastConnection");
                }
            }
        }
        private global::System.Nullable<global::System.DateTime> _lastConnection;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public int lockTimeout
        {
            get
            {
                return this._lockTimeout;
            }
            set
            {
                if (this._lockTimeout != value)
                {
                    this.RaiseDataMemberChanging("lockTimeout");
                    this.ValidateProperty("lockTimeout", value);
                    this._lockTimeout = value;
                    this.RaiseDataMemberChanged("lockTimeout");
                }
            }
        }
        private int _lockTimeout;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public int configurationId
        {
            get
            {
                return this._configurationId;
            }
            set
            {
                if (this._configurationId != value)
                {
                    this.RaiseDataMemberChanging("configurationId");
                    this.ValidateProperty("configurationId", value);
                    this._configurationId = value;
                    this.RaiseDataMemberChanged("configurationId");
                }
            }
        }
        private int _configurationId;
        
        [global::System.ComponentModel.DataAnnotations.Association("FK_ConfigurationDevice", "configurationId", "configurationId", IsForeignKey = true)]
        [global::System.Xml.Serialization.XmlIgnore()]
        public global::LightSwitchApplication.Implementation.Configuration Configuration
        {
            get
            {
                if (this._Configuration == null)
                {
                    this._Configuration = new global::System.ServiceModel.DomainServices.Client.EntityRef<global::LightSwitchApplication.Implementation.Configuration>(this, "Configuration", this.FilterConfiguration);
                }
                return this._Configuration.Entity;
            }
            set
            {
                Configuration previous = this.Configuration;
                if (previous != value)
                {
                    this.ValidateProperty("Configuration", value);
                    if (previous != null)
                    {
                        this._Configuration.Entity = null;
                        previous.Devices.Remove(this);
                    }
                    if (value != null)
                    {
                        this.configurationId = value.configurationId;
                    }
                    else
                    {
                        this.configurationId = default(int);
                    }
                    this._Configuration.Entity = value;
                    if (value != null)
                    {
                        value.Devices.Add(this);
                    }
                    this.RaisePropertyChanged("Configuration");
                }
            }
        }
        private global::System.ServiceModel.DomainServices.Client.EntityRef<global::LightSwitchApplication.Implementation.Configuration> _Configuration;
        private bool FilterConfiguration(global::LightSwitchApplication.Implementation.Configuration entity)
        {
            return global::System.Object.Equals(entity.configurationId, this.configurationId);
        }
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Device.DetailsClass.IImplementation.Configuration
        {
            get
            {
                return this.Configuration;
            }
            set
            {
                this.Configuration = (global::LightSwitchApplication.Implementation.Configuration)value;
            }
        }
        
        [global::System.ComponentModel.DataAnnotations.Association("FK_DeviceConnection", "deviceId", "deviceId")]
        [global::System.Xml.Serialization.XmlIgnore()]
        public global::System.ServiceModel.DomainServices.Client.EntityCollection<Connection> Connections
        {
            get
            {
                if (this._Connections == null)
                {
                    this._Connections = new global::System.ServiceModel.DomainServices.Client.EntityCollection<global::LightSwitchApplication.Implementation.Connection>(this, "Connections", this.FilterConnections, this.AttachConnections, this.DetachConnections);
                }
                return this._Connections;
            }
        }
        private global::System.ServiceModel.DomainServices.Client.EntityCollection<global::LightSwitchApplication.Implementation.Connection> _Connections;
        private void AttachConnections(global::LightSwitchApplication.Implementation.Connection entity)
        {
            entity.Device = this;
        }
        private void DetachConnections(global::LightSwitchApplication.Implementation.Connection entity)
        {
            entity.Device = null;
        }
        private bool FilterConnections(global::LightSwitchApplication.Implementation.Connection entity)
        {
            return global::System.Object.Equals(entity.deviceId, this.deviceId);
        }
        global::System.Collections.IEnumerable global::LightSwitchApplication.Device.DetailsClass.IImplementation.Connections
        {
            get
            {
                return this.Connections;
            }
        }
        
        [global::System.ComponentModel.DataAnnotations.Association("FK_DevicePin", "deviceId", "Device_deviceId")]
        [global::System.Xml.Serialization.XmlIgnore()]
        public global::System.ServiceModel.DomainServices.Client.EntityCollection<Pin> Pins
        {
            get
            {
                if (this._Pins == null)
                {
                    this._Pins = new global::System.ServiceModel.DomainServices.Client.EntityCollection<global::LightSwitchApplication.Implementation.Pin>(this, "Pins", this.FilterPins, this.AttachPins, this.DetachPins);
                }
                return this._Pins;
            }
        }
        private global::System.ServiceModel.DomainServices.Client.EntityCollection<global::LightSwitchApplication.Implementation.Pin> _Pins;
        private void AttachPins(global::LightSwitchApplication.Implementation.Pin entity)
        {
            entity.Device = this;
        }
        private void DetachPins(global::LightSwitchApplication.Implementation.Pin entity)
        {
            entity.Device = null;
        }
        private bool FilterPins(global::LightSwitchApplication.Implementation.Pin entity)
        {
            return global::System.Object.Equals(entity.Device_deviceId, this.deviceId);
        }
        global::System.Collections.IEnumerable global::LightSwitchApplication.Device.DetailsClass.IImplementation.Pins
        {
            get
            {
                return this.Pins;
            }
        }
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public int locationId
        {
            get
            {
                return this._locationId;
            }
            set
            {
                if (this._locationId != value)
                {
                    this.RaiseDataMemberChanging("locationId");
                    this.ValidateProperty("locationId", value);
                    this._locationId = value;
                    this.RaiseDataMemberChanged("locationId");
                }
            }
        }
        private int _locationId;
        
        [global::System.ComponentModel.DataAnnotations.Association("FK_LocationWCS_Device", "locationId", "locationId", IsForeignKey = true)]
        [global::System.Xml.Serialization.XmlIgnore()]
        public global::LightSwitchApplication.Implementation.Location Location
        {
            get
            {
                if (this._Location == null)
                {
                    this._Location = new global::System.ServiceModel.DomainServices.Client.EntityRef<global::LightSwitchApplication.Implementation.Location>(this, "Location", this.FilterLocation);
                }
                return this._Location.Entity;
            }
            set
            {
                Location previous = this.Location;
                if (previous != value)
                {
                    this.ValidateProperty("Location", value);
                    if (previous != null)
                    {
                        this._Location.Entity = null;
                        previous.Devices.Remove(this);
                    }
                    if (value != null)
                    {
                        this.locationId = value.locationId;
                    }
                    else
                    {
                        this.locationId = default(int);
                    }
                    this._Location.Entity = value;
                    if (value != null)
                    {
                        value.Devices.Add(this);
                    }
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        private global::System.ServiceModel.DomainServices.Client.EntityRef<global::LightSwitchApplication.Implementation.Location> _Location;
        private bool FilterLocation(global::LightSwitchApplication.Implementation.Location entity)
        {
            return global::System.Object.Equals(entity.locationId, this.locationId);
        }
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Device.DetailsClass.IImplementation.Location
        {
            get
            {
                return this.Location;
            }
            set
            {
                this.Location = (global::LightSwitchApplication.Implementation.Location)value;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(global::System.ComponentModel.PropertyChangedEventArgs e)
        {
            base.OnPropertyChanged(e);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(e.PropertyName);
            }
        }
        #endregion
    }
    #endregion
    
    #region Location
    [global::System.Runtime.Serialization.DataContract(Namespace = "http://schemas.datacontract.org/2004/07/WcsDB.Implementation")]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class Location :
        global::System.ServiceModel.DomainServices.Client.Entity,
        global::LightSwitchApplication.Location.DetailsClass.IImplementation
    {
        public override object GetIdentity()
        {
            if (this.__host != null && this.__host.IsNewlyAdded)
            {
                return null;
            }
    
            return this._locationId;
        }
        [global::System.ComponentModel.DataAnnotations.Key()]
        [global::System.ComponentModel.DataAnnotations.Editable(false, AllowInitialValue = true)]
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public int locationId
        {
            get
            {
                return this._locationId;
            }
            set
            {
                if (this._locationId != value)
                {
                    this.ValidateProperty("locationId", value);
                    this._locationId = value;
                    this.RaisePropertyChanged("locationId");
                }
            }
        }
        private int _locationId;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public string code
        {
            get
            {
                return this._code;
            }
            set
            {
                if (this._code != value)
                {
                    this.RaiseDataMemberChanging("code");
                    this.ValidateProperty("code", value);
                    this._code = value;
                    this.RaiseDataMemberChanged("code");
                }
            }
        }
        private string _code;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                if (this._name != value)
                {
                    this.RaiseDataMemberChanging("name");
                    this.ValidateProperty("name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("name");
                }
            }
        }
        private string _name;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public string patientType
        {
            get
            {
                return this._patientType;
            }
            set
            {
                if (this._patientType != value)
                {
                    this.RaiseDataMemberChanging("patientType");
                    this.ValidateProperty("patientType", value);
                    this._patientType = value;
                    this.RaiseDataMemberChanged("patientType");
                }
            }
        }
        private string _patientType;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public string contactInfo
        {
            get
            {
                return this._contactInfo;
            }
            set
            {
                if (this._contactInfo != value)
                {
                    this.RaiseDataMemberChanging("contactInfo");
                    this.ValidateProperty("contactInfo", value);
                    this._contactInfo = value;
                    this.RaiseDataMemberChanged("contactInfo");
                }
            }
        }
        private string _contactInfo;
        
        [global::System.ComponentModel.DataAnnotations.Association("FK_LocationConfigurationLocation", "locationId", "locationId")]
        [global::System.Xml.Serialization.XmlIgnore()]
        public global::System.ServiceModel.DomainServices.Client.EntityCollection<ConfigurationLocation> ConfigurationLocations
        {
            get
            {
                if (this._ConfigurationLocations == null)
                {
                    this._ConfigurationLocations = new global::System.ServiceModel.DomainServices.Client.EntityCollection<global::LightSwitchApplication.Implementation.ConfigurationLocation>(this, "ConfigurationLocations", this.FilterConfigurationLocations, this.AttachConfigurationLocations, this.DetachConfigurationLocations);
                }
                return this._ConfigurationLocations;
            }
        }
        private global::System.ServiceModel.DomainServices.Client.EntityCollection<global::LightSwitchApplication.Implementation.ConfigurationLocation> _ConfigurationLocations;
        private void AttachConfigurationLocations(global::LightSwitchApplication.Implementation.ConfigurationLocation entity)
        {
            entity.Location = this;
        }
        private void DetachConfigurationLocations(global::LightSwitchApplication.Implementation.ConfigurationLocation entity)
        {
            entity.Location = null;
        }
        private bool FilterConfigurationLocations(global::LightSwitchApplication.Implementation.ConfigurationLocation entity)
        {
            return global::System.Object.Equals(entity.locationId, this.locationId);
        }
        global::System.Collections.IEnumerable global::LightSwitchApplication.Location.DetailsClass.IImplementation.ConfigurationLocations
        {
            get
            {
                return this.ConfigurationLocations;
            }
        }
        
        [global::System.ComponentModel.DataAnnotations.Association("FK_LocationWCS_Device", "locationId", "locationId")]
        [global::System.Xml.Serialization.XmlIgnore()]
        public global::System.ServiceModel.DomainServices.Client.EntityCollection<Device> Devices
        {
            get
            {
                if (this._Devices == null)
                {
                    this._Devices = new global::System.ServiceModel.DomainServices.Client.EntityCollection<global::LightSwitchApplication.Implementation.Device>(this, "Devices", this.FilterDevices, this.AttachDevices, this.DetachDevices);
                }
                return this._Devices;
            }
        }
        private global::System.ServiceModel.DomainServices.Client.EntityCollection<global::LightSwitchApplication.Implementation.Device> _Devices;
        private void AttachDevices(global::LightSwitchApplication.Implementation.Device entity)
        {
            entity.Location = this;
        }
        private void DetachDevices(global::LightSwitchApplication.Implementation.Device entity)
        {
            entity.Location = null;
        }
        private bool FilterDevices(global::LightSwitchApplication.Implementation.Device entity)
        {
            return global::System.Object.Equals(entity.locationId, this.locationId);
        }
        global::System.Collections.IEnumerable global::LightSwitchApplication.Location.DetailsClass.IImplementation.Devices
        {
            get
            {
                return this.Devices;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(global::System.ComponentModel.PropertyChangedEventArgs e)
        {
            base.OnPropertyChanged(e);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(e.PropertyName);
            }
        }
        #endregion
    }
    #endregion
    
    #region Log
    [global::System.Runtime.Serialization.DataContract(Namespace = "http://schemas.datacontract.org/2004/07/WcsDB.Implementation")]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class Log :
        global::System.ServiceModel.DomainServices.Client.Entity,
        global::LightSwitchApplication.Log.DetailsClass.IImplementation
    {
        public override object GetIdentity()
        {
            if (this.__host != null && this.__host.IsNewlyAdded)
            {
                return null;
            }
    
            if (this._Thread == null || this._Level == null || this._Logger == null || this._Message == null)
            {
                return null;
            }
    
            return global::System.ServiceModel.DomainServices.Client.EntityKey.Create(this._logId, this._c_Date, this._Thread, this._Level, this._Logger, this._Message);
        }
        [global::System.ComponentModel.DataAnnotations.Key()]
        [global::System.ComponentModel.DataAnnotations.Editable(false, AllowInitialValue = true)]
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public int logId
        {
            get
            {
                return this._logId;
            }
            set
            {
                if (this._logId != value)
                {
                    this.ValidateProperty("logId", value);
                    this._logId = value;
                    this.RaisePropertyChanged("logId");
                }
            }
        }
        private int _logId;
        
        [global::System.ComponentModel.DataAnnotations.Key()]
        [global::System.ComponentModel.DataAnnotations.Editable(false, AllowInitialValue = true)]
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public global::System.DateTime c_Date
        {
            get
            {
                return this._c_Date;
            }
            set
            {
                if (this._c_Date != value)
                {
                    this.ValidateProperty("c_Date", value);
                    this._c_Date = value;
                    this.RaisePropertyChanged("c_Date");
                }
            }
        }
        private global::System.DateTime _c_Date;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public string ComputerName
        {
            get
            {
                return this._ComputerName;
            }
            set
            {
                if (this._ComputerName != value)
                {
                    this.RaiseDataMemberChanging("ComputerName");
                    this.ValidateProperty("ComputerName", value);
                    this._ComputerName = value;
                    this.RaiseDataMemberChanged("ComputerName");
                }
            }
        }
        private string _ComputerName;
        
        [global::System.ComponentModel.DataAnnotations.Key()]
        [global::System.ComponentModel.DataAnnotations.Editable(false, AllowInitialValue = true)]
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public string Thread
        {
            get
            {
                return this._Thread;
            }
            set
            {
                if (this._Thread != value)
                {
                    this.ValidateProperty("Thread", value);
                    this._Thread = value;
                    this.RaisePropertyChanged("Thread");
                }
            }
        }
        private string _Thread;
        
        [global::System.ComponentModel.DataAnnotations.Key()]
        [global::System.ComponentModel.DataAnnotations.Editable(false, AllowInitialValue = true)]
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public string Level
        {
            get
            {
                return this._Level;
            }
            set
            {
                if (this._Level != value)
                {
                    this.ValidateProperty("Level", value);
                    this._Level = value;
                    this.RaisePropertyChanged("Level");
                }
            }
        }
        private string _Level;
        
        [global::System.ComponentModel.DataAnnotations.Key()]
        [global::System.ComponentModel.DataAnnotations.Editable(false, AllowInitialValue = true)]
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public string Logger
        {
            get
            {
                return this._Logger;
            }
            set
            {
                if (this._Logger != value)
                {
                    this.ValidateProperty("Logger", value);
                    this._Logger = value;
                    this.RaisePropertyChanged("Logger");
                }
            }
        }
        private string _Logger;
        
        [global::System.ComponentModel.DataAnnotations.Key()]
        [global::System.ComponentModel.DataAnnotations.Editable(false, AllowInitialValue = true)]
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public string Message
        {
            get
            {
                return this._Message;
            }
            set
            {
                if (this._Message != value)
                {
                    this.ValidateProperty("Message", value);
                    this._Message = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        private string _Message;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public string Exception
        {
            get
            {
                return this._Exception;
            }
            set
            {
                if (this._Exception != value)
                {
                    this.RaiseDataMemberChanging("Exception");
                    this.ValidateProperty("Exception", value);
                    this._Exception = value;
                    this.RaiseDataMemberChanged("Exception");
                }
            }
        }
        private string _Exception;
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(global::System.ComponentModel.PropertyChangedEventArgs e)
        {
            base.OnPropertyChanged(e);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(e.PropertyName);
            }
        }
        #endregion
    }
    #endregion
    
    #region NotificationRule
    [global::System.Runtime.Serialization.DataContract(Namespace = "http://schemas.datacontract.org/2004/07/WcsDB.Implementation")]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class NotificationRule :
        global::System.ServiceModel.DomainServices.Client.Entity,
        global::LightSwitchApplication.NotificationRule.DetailsClass.IImplementation
    {
        public override object GetIdentity()
        {
            if (this.__host != null && this.__host.IsNewlyAdded)
            {
                return null;
            }
    
            return this._notificationRuleId;
        }
        [global::System.ComponentModel.DataAnnotations.Key()]
        [global::System.ComponentModel.DataAnnotations.Editable(false, AllowInitialValue = true)]
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public int notificationRuleId
        {
            get
            {
                return this._notificationRuleId;
            }
            set
            {
                if (this._notificationRuleId != value)
                {
                    this.ValidateProperty("notificationRuleId", value);
                    this._notificationRuleId = value;
                    this.RaisePropertyChanged("notificationRuleId");
                }
            }
        }
        private int _notificationRuleId;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public string description
        {
            get
            {
                return this._description;
            }
            set
            {
                if (this._description != value)
                {
                    this.RaiseDataMemberChanging("description");
                    this.ValidateProperty("description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("description");
                }
            }
        }
        private string _description;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public int priorToProcedureTime
        {
            get
            {
                return this._priorToProcedureTime;
            }
            set
            {
                if (this._priorToProcedureTime != value)
                {
                    this.RaiseDataMemberChanging("priorToProcedureTime");
                    this.ValidateProperty("priorToProcedureTime", value);
                    this._priorToProcedureTime = value;
                    this.RaiseDataMemberChanged("priorToProcedureTime");
                }
            }
        }
        private int _priorToProcedureTime;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public global::System.Nullable<int> durationMinutes
        {
            get
            {
                return this._durationMinutes;
            }
            set
            {
                if (this._durationMinutes != value)
                {
                    this.RaiseDataMemberChanging("durationMinutes");
                    this.ValidateProperty("durationMinutes", value);
                    this._durationMinutes = value;
                    this.RaiseDataMemberChanged("durationMinutes");
                }
            }
        }
        private global::System.Nullable<int> _durationMinutes;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public bool isAcknowledgmentRequired
        {
            get
            {
                return this._isAcknowledgmentRequired;
            }
            set
            {
                if (this._isAcknowledgmentRequired != value)
                {
                    this.RaiseDataMemberChanging("isAcknowledgmentRequired");
                    this.ValidateProperty("isAcknowledgmentRequired", value);
                    this._isAcknowledgmentRequired = value;
                    this.RaiseDataMemberChanged("isAcknowledgmentRequired");
                }
            }
        }
        private bool _isAcknowledgmentRequired;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public int Procedure_procedureId
        {
            get
            {
                return this._Procedure_procedureId;
            }
            set
            {
                if (this._Procedure_procedureId != value)
                {
                    this.RaiseDataMemberChanging("Procedure_procedureId");
                    this.ValidateProperty("Procedure_procedureId", value);
                    this._Procedure_procedureId = value;
                    this.RaiseDataMemberChanged("Procedure_procedureId");
                }
            }
        }
        private int _Procedure_procedureId;
        
        [global::System.ComponentModel.DataAnnotations.Association("FK_NotificationRuleProcedure", "Procedure_procedureId", "procedureId", IsForeignKey = true)]
        [global::System.Xml.Serialization.XmlIgnore()]
        public global::LightSwitchApplication.Implementation.Procedure Procedure
        {
            get
            {
                if (this._Procedure == null)
                {
                    this._Procedure = new global::System.ServiceModel.DomainServices.Client.EntityRef<global::LightSwitchApplication.Implementation.Procedure>(this, "Procedure", this.FilterProcedure);
                }
                return this._Procedure.Entity;
            }
            set
            {
                Procedure previous = this.Procedure;
                if (previous != value)
                {
                    this.ValidateProperty("Procedure", value);
                    if (previous != null)
                    {
                        this._Procedure.Entity = null;
                        previous.NotificationRules.Remove(this);
                    }
                    if (value != null)
                    {
                        this.Procedure_procedureId = value.procedureId;
                    }
                    else
                    {
                        this.Procedure_procedureId = default(int);
                    }
                    this._Procedure.Entity = value;
                    if (value != null)
                    {
                        value.NotificationRules.Add(this);
                    }
                    this.RaisePropertyChanged("Procedure");
                }
            }
        }
        private global::System.ServiceModel.DomainServices.Client.EntityRef<global::LightSwitchApplication.Implementation.Procedure> _Procedure;
        private bool FilterProcedure(global::LightSwitchApplication.Implementation.Procedure entity)
        {
            return global::System.Object.Equals(entity.procedureId, this.Procedure_procedureId);
        }
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.NotificationRule.DetailsClass.IImplementation.Procedure
        {
            get
            {
                return this.Procedure;
            }
            set
            {
                this.Procedure = (global::LightSwitchApplication.Implementation.Procedure)value;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(global::System.ComponentModel.PropertyChangedEventArgs e)
        {
            base.OnPropertyChanged(e);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(e.PropertyName);
            }
        }
        #endregion
    }
    #endregion
    
    #region Pin
    [global::System.Runtime.Serialization.DataContract(Namespace = "http://schemas.datacontract.org/2004/07/WcsDB.Implementation")]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class Pin :
        global::System.ServiceModel.DomainServices.Client.Entity,
        global::LightSwitchApplication.Pin.DetailsClass.IImplementation
    {
        public override object GetIdentity()
        {
            if (this.__host != null && this.__host.IsNewlyAdded)
            {
                return null;
            }
    
            return this._pinId;
        }
        [global::System.ComponentModel.DataAnnotations.Key()]
        [global::System.ComponentModel.DataAnnotations.Editable(false, AllowInitialValue = true)]
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public int pinId
        {
            get
            {
                return this._pinId;
            }
            set
            {
                if (this._pinId != value)
                {
                    this.ValidateProperty("pinId", value);
                    this._pinId = value;
                    this.RaisePropertyChanged("pinId");
                }
            }
        }
        private int _pinId;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public string pin1
        {
            get
            {
                return this._pin1;
            }
            set
            {
                if (this._pin1 != value)
                {
                    this.RaiseDataMemberChanging("pin1");
                    this.ValidateProperty("pin1", value);
                    this._pin1 = value;
                    this.RaiseDataMemberChanged("pin1");
                }
            }
        }
        private string _pin1;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public int Device_deviceId
        {
            get
            {
                return this._Device_deviceId;
            }
            set
            {
                if (this._Device_deviceId != value)
                {
                    this.RaiseDataMemberChanging("Device_deviceId");
                    this.ValidateProperty("Device_deviceId", value);
                    this._Device_deviceId = value;
                    this.RaiseDataMemberChanged("Device_deviceId");
                }
            }
        }
        private int _Device_deviceId;
        
        [global::System.ComponentModel.DataAnnotations.Association("FK_DevicePin", "Device_deviceId", "deviceId", IsForeignKey = true)]
        [global::System.Xml.Serialization.XmlIgnore()]
        public global::LightSwitchApplication.Implementation.Device Device
        {
            get
            {
                if (this._Device == null)
                {
                    this._Device = new global::System.ServiceModel.DomainServices.Client.EntityRef<global::LightSwitchApplication.Implementation.Device>(this, "Device", this.FilterDevice);
                }
                return this._Device.Entity;
            }
            set
            {
                Device previous = this.Device;
                if (previous != value)
                {
                    this.ValidateProperty("Device", value);
                    if (previous != null)
                    {
                        this._Device.Entity = null;
                        previous.Pins.Remove(this);
                    }
                    if (value != null)
                    {
                        this.Device_deviceId = value.deviceId;
                    }
                    else
                    {
                        this.Device_deviceId = default(int);
                    }
                    this._Device.Entity = value;
                    if (value != null)
                    {
                        value.Pins.Add(this);
                    }
                    this.RaisePropertyChanged("Device");
                }
            }
        }
        private global::System.ServiceModel.DomainServices.Client.EntityRef<global::LightSwitchApplication.Implementation.Device> _Device;
        private bool FilterDevice(global::LightSwitchApplication.Implementation.Device entity)
        {
            return global::System.Object.Equals(entity.deviceId, this.Device_deviceId);
        }
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Pin.DetailsClass.IImplementation.Device
        {
            get
            {
                return this.Device;
            }
            set
            {
                this.Device = (global::LightSwitchApplication.Implementation.Device)value;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(global::System.ComponentModel.PropertyChangedEventArgs e)
        {
            base.OnPropertyChanged(e);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(e.PropertyName);
            }
        }
        #endregion
    }
    #endregion
    
    #region Procedure
    [global::System.Runtime.Serialization.DataContract(Namespace = "http://schemas.datacontract.org/2004/07/WcsDB.Implementation")]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class Procedure :
        global::System.ServiceModel.DomainServices.Client.Entity,
        global::LightSwitchApplication.Procedure.DetailsClass.IImplementation
    {
        public override object GetIdentity()
        {
            if (this.__host != null && this.__host.IsNewlyAdded)
            {
                return null;
            }
    
            return this._procedureId;
        }
        [global::System.ComponentModel.DataAnnotations.Key()]
        [global::System.ComponentModel.DataAnnotations.Editable(false, AllowInitialValue = true)]
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public int procedureId
        {
            get
            {
                return this._procedureId;
            }
            set
            {
                if (this._procedureId != value)
                {
                    this.ValidateProperty("procedureId", value);
                    this._procedureId = value;
                    this.RaisePropertyChanged("procedureId");
                }
            }
        }
        private int _procedureId;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public string externalId
        {
            get
            {
                return this._externalId;
            }
            set
            {
                if (this._externalId != value)
                {
                    this.RaiseDataMemberChanging("externalId");
                    this.ValidateProperty("externalId", value);
                    this._externalId = value;
                    this.RaiseDataMemberChanged("externalId");
                }
            }
        }
        private string _externalId;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public string code
        {
            get
            {
                return this._code;
            }
            set
            {
                if (this._code != value)
                {
                    this.RaiseDataMemberChanging("code");
                    this.ValidateProperty("code", value);
                    this._code = value;
                    this.RaiseDataMemberChanged("code");
                }
            }
        }
        private string _code;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public string description
        {
            get
            {
                return this._description;
            }
            set
            {
                if (this._description != value)
                {
                    this.RaiseDataMemberChanging("description");
                    this.ValidateProperty("description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("description");
                }
            }
        }
        private string _description;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public global::System.Nullable<int> durationMinutes
        {
            get
            {
                return this._durationMinutes;
            }
            set
            {
                if (this._durationMinutes != value)
                {
                    this.RaiseDataMemberChanging("durationMinutes");
                    this.ValidateProperty("durationMinutes", value);
                    this._durationMinutes = value;
                    this.RaiseDataMemberChanged("durationMinutes");
                }
            }
        }
        private global::System.Nullable<int> _durationMinutes;
        
        [global::System.ComponentModel.DataAnnotations.Association("FK_NotificationRuleProcedure", "procedureId", "Procedure_procedureId")]
        [global::System.Xml.Serialization.XmlIgnore()]
        public global::System.ServiceModel.DomainServices.Client.EntityCollection<NotificationRule> NotificationRules
        {
            get
            {
                if (this._NotificationRules == null)
                {
                    this._NotificationRules = new global::System.ServiceModel.DomainServices.Client.EntityCollection<global::LightSwitchApplication.Implementation.NotificationRule>(this, "NotificationRules", this.FilterNotificationRules, this.AttachNotificationRules, this.DetachNotificationRules);
                }
                return this._NotificationRules;
            }
        }
        private global::System.ServiceModel.DomainServices.Client.EntityCollection<global::LightSwitchApplication.Implementation.NotificationRule> _NotificationRules;
        private void AttachNotificationRules(global::LightSwitchApplication.Implementation.NotificationRule entity)
        {
            entity.Procedure = this;
        }
        private void DetachNotificationRules(global::LightSwitchApplication.Implementation.NotificationRule entity)
        {
            entity.Procedure = null;
        }
        private bool FilterNotificationRules(global::LightSwitchApplication.Implementation.NotificationRule entity)
        {
            return global::System.Object.Equals(entity.Procedure_procedureId, this.procedureId);
        }
        global::System.Collections.IEnumerable global::LightSwitchApplication.Procedure.DetailsClass.IImplementation.NotificationRules
        {
            get
            {
                return this.NotificationRules;
            }
        }
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public int ProcedureCategory_procedureCategoryId
        {
            get
            {
                return this._ProcedureCategory_procedureCategoryId;
            }
            set
            {
                if (this._ProcedureCategory_procedureCategoryId != value)
                {
                    this.RaiseDataMemberChanging("ProcedureCategory_procedureCategoryId");
                    this.ValidateProperty("ProcedureCategory_procedureCategoryId", value);
                    this._ProcedureCategory_procedureCategoryId = value;
                    this.RaiseDataMemberChanged("ProcedureCategory_procedureCategoryId");
                }
            }
        }
        private int _ProcedureCategory_procedureCategoryId;
        
        [global::System.ComponentModel.DataAnnotations.Association("FK_ProcedureCategoryProcedure", "ProcedureCategory_procedureCategoryId", "procedureCategoryId", IsForeignKey = true)]
        [global::System.Xml.Serialization.XmlIgnore()]
        public global::LightSwitchApplication.Implementation.ProcedureCategory ProcedureCategory
        {
            get
            {
                if (this._ProcedureCategory == null)
                {
                    this._ProcedureCategory = new global::System.ServiceModel.DomainServices.Client.EntityRef<global::LightSwitchApplication.Implementation.ProcedureCategory>(this, "ProcedureCategory", this.FilterProcedureCategory);
                }
                return this._ProcedureCategory.Entity;
            }
            set
            {
                ProcedureCategory previous = this.ProcedureCategory;
                if (previous != value)
                {
                    this.ValidateProperty("ProcedureCategory", value);
                    if (previous != null)
                    {
                        this._ProcedureCategory.Entity = null;
                        previous.Procedures.Remove(this);
                    }
                    if (value != null)
                    {
                        this.ProcedureCategory_procedureCategoryId = value.procedureCategoryId;
                    }
                    else
                    {
                        this.ProcedureCategory_procedureCategoryId = default(int);
                    }
                    this._ProcedureCategory.Entity = value;
                    if (value != null)
                    {
                        value.Procedures.Add(this);
                    }
                    this.RaisePropertyChanged("ProcedureCategory");
                }
            }
        }
        private global::System.ServiceModel.DomainServices.Client.EntityRef<global::LightSwitchApplication.Implementation.ProcedureCategory> _ProcedureCategory;
        private bool FilterProcedureCategory(global::LightSwitchApplication.Implementation.ProcedureCategory entity)
        {
            return global::System.Object.Equals(entity.procedureCategoryId, this.ProcedureCategory_procedureCategoryId);
        }
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Procedure.DetailsClass.IImplementation.ProcedureCategory
        {
            get
            {
                return this.ProcedureCategory;
            }
            set
            {
                this.ProcedureCategory = (global::LightSwitchApplication.Implementation.ProcedureCategory)value;
            }
        }
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public int externalSourceId
        {
            get
            {
                return this._externalSourceId;
            }
            set
            {
                if (this._externalSourceId != value)
                {
                    this.RaiseDataMemberChanging("externalSourceId");
                    this.ValidateProperty("externalSourceId", value);
                    this._externalSourceId = value;
                    this.RaiseDataMemberChanged("externalSourceId");
                }
            }
        }
        private int _externalSourceId;
        
        [global::System.ComponentModel.DataAnnotations.Association("FK_ExternalSourceProcedure", "externalSourceId", "externalSourceId", IsForeignKey = true)]
        [global::System.Xml.Serialization.XmlIgnore()]
        public global::LightSwitchApplication.Implementation.ExternalSource ExternalSource
        {
            get
            {
                if (this._ExternalSource == null)
                {
                    this._ExternalSource = new global::System.ServiceModel.DomainServices.Client.EntityRef<global::LightSwitchApplication.Implementation.ExternalSource>(this, "ExternalSource", this.FilterExternalSource);
                }
                return this._ExternalSource.Entity;
            }
            set
            {
                ExternalSource previous = this.ExternalSource;
                if (previous != value)
                {
                    this.ValidateProperty("ExternalSource", value);
                    if (previous != null)
                    {
                        this._ExternalSource.Entity = null;
                        previous.Procedures.Remove(this);
                    }
                    if (value != null)
                    {
                        this.externalSourceId = value.externalSourceId;
                    }
                    else
                    {
                        this.externalSourceId = default(int);
                    }
                    this._ExternalSource.Entity = value;
                    if (value != null)
                    {
                        value.Procedures.Add(this);
                    }
                    this.RaisePropertyChanged("ExternalSource");
                }
            }
        }
        private global::System.ServiceModel.DomainServices.Client.EntityRef<global::LightSwitchApplication.Implementation.ExternalSource> _ExternalSource;
        private bool FilterExternalSource(global::LightSwitchApplication.Implementation.ExternalSource entity)
        {
            return global::System.Object.Equals(entity.externalSourceId, this.externalSourceId);
        }
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Procedure.DetailsClass.IImplementation.ExternalSource
        {
            get
            {
                return this.ExternalSource;
            }
            set
            {
                this.ExternalSource = (global::LightSwitchApplication.Implementation.ExternalSource)value;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(global::System.ComponentModel.PropertyChangedEventArgs e)
        {
            base.OnPropertyChanged(e);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(e.PropertyName);
            }
        }
        #endregion
    }
    #endregion
    
    #region ProcedureCategory
    [global::System.Runtime.Serialization.DataContract(Namespace = "http://schemas.datacontract.org/2004/07/WcsDB.Implementation")]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class ProcedureCategory :
        global::System.ServiceModel.DomainServices.Client.Entity,
        global::LightSwitchApplication.ProcedureCategory.DetailsClass.IImplementation
    {
        public override object GetIdentity()
        {
            if (this.__host != null && this.__host.IsNewlyAdded)
            {
                return null;
            }
    
            return this._procedureCategoryId;
        }
        [global::System.ComponentModel.DataAnnotations.Key()]
        [global::System.ComponentModel.DataAnnotations.Editable(false, AllowInitialValue = true)]
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public int procedureCategoryId
        {
            get
            {
                return this._procedureCategoryId;
            }
            set
            {
                if (this._procedureCategoryId != value)
                {
                    this.ValidateProperty("procedureCategoryId", value);
                    this._procedureCategoryId = value;
                    this.RaisePropertyChanged("procedureCategoryId");
                }
            }
        }
        private int _procedureCategoryId;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public string externalId
        {
            get
            {
                return this._externalId;
            }
            set
            {
                if (this._externalId != value)
                {
                    this.RaiseDataMemberChanging("externalId");
                    this.ValidateProperty("externalId", value);
                    this._externalId = value;
                    this.RaiseDataMemberChanged("externalId");
                }
            }
        }
        private string _externalId;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public bool includeInMerge
        {
            get
            {
                return this._includeInMerge;
            }
            set
            {
                if (this._includeInMerge != value)
                {
                    this.RaiseDataMemberChanging("includeInMerge");
                    this.ValidateProperty("includeInMerge", value);
                    this._includeInMerge = value;
                    this.RaiseDataMemberChanged("includeInMerge");
                }
            }
        }
        private bool _includeInMerge;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public string description
        {
            get
            {
                return this._description;
            }
            set
            {
                if (this._description != value)
                {
                    this.RaiseDataMemberChanging("description");
                    this.ValidateProperty("description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("description");
                }
            }
        }
        private string _description;
        
        [global::System.ComponentModel.DataAnnotations.Association("FK_ProcedureCategoryProcedure", "procedureCategoryId", "ProcedureCategory_procedureCategoryId")]
        [global::System.Xml.Serialization.XmlIgnore()]
        public global::System.ServiceModel.DomainServices.Client.EntityCollection<Procedure> Procedures
        {
            get
            {
                if (this._Procedures == null)
                {
                    this._Procedures = new global::System.ServiceModel.DomainServices.Client.EntityCollection<global::LightSwitchApplication.Implementation.Procedure>(this, "Procedures", this.FilterProcedures, this.AttachProcedures, this.DetachProcedures);
                }
                return this._Procedures;
            }
        }
        private global::System.ServiceModel.DomainServices.Client.EntityCollection<global::LightSwitchApplication.Implementation.Procedure> _Procedures;
        private void AttachProcedures(global::LightSwitchApplication.Implementation.Procedure entity)
        {
            entity.ProcedureCategory = this;
        }
        private void DetachProcedures(global::LightSwitchApplication.Implementation.Procedure entity)
        {
            entity.ProcedureCategory = null;
        }
        private bool FilterProcedures(global::LightSwitchApplication.Implementation.Procedure entity)
        {
            return global::System.Object.Equals(entity.ProcedureCategory_procedureCategoryId, this.procedureCategoryId);
        }
        global::System.Collections.IEnumerable global::LightSwitchApplication.ProcedureCategory.DetailsClass.IImplementation.Procedures
        {
            get
            {
                return this.Procedures;
            }
        }
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public int externalSourceId
        {
            get
            {
                return this._externalSourceId;
            }
            set
            {
                if (this._externalSourceId != value)
                {
                    this.RaiseDataMemberChanging("externalSourceId");
                    this.ValidateProperty("externalSourceId", value);
                    this._externalSourceId = value;
                    this.RaiseDataMemberChanged("externalSourceId");
                }
            }
        }
        private int _externalSourceId;
        
        [global::System.ComponentModel.DataAnnotations.Association("FK_ExternalSourceProcedureCategory", "externalSourceId", "externalSourceId", IsForeignKey = true)]
        [global::System.Xml.Serialization.XmlIgnore()]
        public global::LightSwitchApplication.Implementation.ExternalSource ExternalSource
        {
            get
            {
                if (this._ExternalSource == null)
                {
                    this._ExternalSource = new global::System.ServiceModel.DomainServices.Client.EntityRef<global::LightSwitchApplication.Implementation.ExternalSource>(this, "ExternalSource", this.FilterExternalSource);
                }
                return this._ExternalSource.Entity;
            }
            set
            {
                ExternalSource previous = this.ExternalSource;
                if (previous != value)
                {
                    this.ValidateProperty("ExternalSource", value);
                    if (previous != null)
                    {
                        this._ExternalSource.Entity = null;
                        previous.ProcedureCategories.Remove(this);
                    }
                    if (value != null)
                    {
                        this.externalSourceId = value.externalSourceId;
                    }
                    else
                    {
                        this.externalSourceId = default(int);
                    }
                    this._ExternalSource.Entity = value;
                    if (value != null)
                    {
                        value.ProcedureCategories.Add(this);
                    }
                    this.RaisePropertyChanged("ExternalSource");
                }
            }
        }
        private global::System.ServiceModel.DomainServices.Client.EntityRef<global::LightSwitchApplication.Implementation.ExternalSource> _ExternalSource;
        private bool FilterExternalSource(global::LightSwitchApplication.Implementation.ExternalSource entity)
        {
            return global::System.Object.Equals(entity.externalSourceId, this.externalSourceId);
        }
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.ProcedureCategory.DetailsClass.IImplementation.ExternalSource
        {
            get
            {
                return this.ExternalSource;
            }
            set
            {
                this.ExternalSource = (global::LightSwitchApplication.Implementation.ExternalSource)value;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(global::System.ComponentModel.PropertyChangedEventArgs e)
        {
            base.OnPropertyChanged(e);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(e.PropertyName);
            }
        }
        #endregion
    }
    #endregion
    
    #region ExternalSource
    [global::System.Runtime.Serialization.DataContract(Namespace = "http://schemas.datacontract.org/2004/07/WcsDB.Implementation")]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class ExternalSource :
        global::System.ServiceModel.DomainServices.Client.Entity,
        global::LightSwitchApplication.ExternalSource.DetailsClass.IImplementation
    {
        public override object GetIdentity()
        {
            if (this.__host != null && this.__host.IsNewlyAdded)
            {
                return null;
            }
    
            return this._externalSourceId;
        }
        [global::System.ComponentModel.DataAnnotations.Key()]
        [global::System.ComponentModel.DataAnnotations.Editable(false, AllowInitialValue = true)]
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public int externalSourceId
        {
            get
            {
                return this._externalSourceId;
            }
            set
            {
                if (this._externalSourceId != value)
                {
                    this.ValidateProperty("externalSourceId", value);
                    this._externalSourceId = value;
                    this.RaisePropertyChanged("externalSourceId");
                }
            }
        }
        private int _externalSourceId;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public string source
        {
            get
            {
                return this._source;
            }
            set
            {
                if (this._source != value)
                {
                    this.RaiseDataMemberChanging("source");
                    this.ValidateProperty("source", value);
                    this._source = value;
                    this.RaiseDataMemberChanged("source");
                }
            }
        }
        private string _source;
        
        [global::System.ComponentModel.DataAnnotations.Association("FK_ExternalSourceProcedure", "externalSourceId", "externalSourceId")]
        [global::System.Xml.Serialization.XmlIgnore()]
        public global::System.ServiceModel.DomainServices.Client.EntityCollection<Procedure> Procedures
        {
            get
            {
                if (this._Procedures == null)
                {
                    this._Procedures = new global::System.ServiceModel.DomainServices.Client.EntityCollection<global::LightSwitchApplication.Implementation.Procedure>(this, "Procedures", this.FilterProcedures, this.AttachProcedures, this.DetachProcedures);
                }
                return this._Procedures;
            }
        }
        private global::System.ServiceModel.DomainServices.Client.EntityCollection<global::LightSwitchApplication.Implementation.Procedure> _Procedures;
        private void AttachProcedures(global::LightSwitchApplication.Implementation.Procedure entity)
        {
            entity.ExternalSource = this;
        }
        private void DetachProcedures(global::LightSwitchApplication.Implementation.Procedure entity)
        {
            entity.ExternalSource = null;
        }
        private bool FilterProcedures(global::LightSwitchApplication.Implementation.Procedure entity)
        {
            return global::System.Object.Equals(entity.externalSourceId, this.externalSourceId);
        }
        global::System.Collections.IEnumerable global::LightSwitchApplication.ExternalSource.DetailsClass.IImplementation.Procedures
        {
            get
            {
                return this.Procedures;
            }
        }
        
        [global::System.ComponentModel.DataAnnotations.Association("FK_ExternalSourceProcedureCategory", "externalSourceId", "externalSourceId")]
        [global::System.Xml.Serialization.XmlIgnore()]
        public global::System.ServiceModel.DomainServices.Client.EntityCollection<ProcedureCategory> ProcedureCategories
        {
            get
            {
                if (this._ProcedureCategories == null)
                {
                    this._ProcedureCategories = new global::System.ServiceModel.DomainServices.Client.EntityCollection<global::LightSwitchApplication.Implementation.ProcedureCategory>(this, "ProcedureCategories", this.FilterProcedureCategories, this.AttachProcedureCategories, this.DetachProcedureCategories);
                }
                return this._ProcedureCategories;
            }
        }
        private global::System.ServiceModel.DomainServices.Client.EntityCollection<global::LightSwitchApplication.Implementation.ProcedureCategory> _ProcedureCategories;
        private void AttachProcedureCategories(global::LightSwitchApplication.Implementation.ProcedureCategory entity)
        {
            entity.ExternalSource = this;
        }
        private void DetachProcedureCategories(global::LightSwitchApplication.Implementation.ProcedureCategory entity)
        {
            entity.ExternalSource = null;
        }
        private bool FilterProcedureCategories(global::LightSwitchApplication.Implementation.ProcedureCategory entity)
        {
            return global::System.Object.Equals(entity.externalSourceId, this.externalSourceId);
        }
        global::System.Collections.IEnumerable global::LightSwitchApplication.ExternalSource.DetailsClass.IImplementation.ProcedureCategories
        {
            get
            {
                return this.ProcedureCategories;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(global::System.ComponentModel.PropertyChangedEventArgs e)
        {
            base.OnPropertyChanged(e);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(e.PropertyName);
            }
        }
        #endregion
    }
    #endregion
    
    #region WcsDB
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class WcsDB
        : global::Microsoft.LightSwitch.ClientGenerated.Implementation.DomainContext
    {
        public WcsDB(global::Microsoft.LightSwitch.IDataService dataService)
            : base(dataService, global::Microsoft.LightSwitch.ClientGenerated.Implementation.DomainContext.CreateWcfDomainClient<IWcsDBContract>(new global::System.Uri("LightSwitchApplication-Implementation-WcsDBDomainService.svc", global::System.UriKind.Relative)))
        {
        }
    
        public global::System.ServiceModel.DomainServices.Client.EntitySet<global::LightSwitchApplication.Implementation.Configuration> ConfigurationEntityList
        {
            get
            {
                return base.EntityContainer.GetEntitySet<global::LightSwitchApplication.Implementation.Configuration>();
            }
        }
        public global::System.ServiceModel.DomainServices.Client.EntitySet<global::LightSwitchApplication.Implementation.ConfigurationLocation> ConfigurationLocationEntityList
        {
            get
            {
                return base.EntityContainer.GetEntitySet<global::LightSwitchApplication.Implementation.ConfigurationLocation>();
            }
        }
        public global::System.ServiceModel.DomainServices.Client.EntitySet<global::LightSwitchApplication.Implementation.ConfigurationType> ConfigurationTypeEntityList
        {
            get
            {
                return base.EntityContainer.GetEntitySet<global::LightSwitchApplication.Implementation.ConfigurationType>();
            }
        }
        public global::System.ServiceModel.DomainServices.Client.EntitySet<global::LightSwitchApplication.Implementation.Connection> ConnectionEntityList
        {
            get
            {
                return base.EntityContainer.GetEntitySet<global::LightSwitchApplication.Implementation.Connection>();
            }
        }
        public global::System.ServiceModel.DomainServices.Client.EntitySet<global::LightSwitchApplication.Implementation.Device> DeviceEntityList
        {
            get
            {
                return base.EntityContainer.GetEntitySet<global::LightSwitchApplication.Implementation.Device>();
            }
        }
        public global::System.ServiceModel.DomainServices.Client.EntitySet<global::LightSwitchApplication.Implementation.Location> LocationEntityList
        {
            get
            {
                return base.EntityContainer.GetEntitySet<global::LightSwitchApplication.Implementation.Location>();
            }
        }
        public global::System.ServiceModel.DomainServices.Client.EntitySet<global::LightSwitchApplication.Implementation.Log> LogEntityList
        {
            get
            {
                return base.EntityContainer.GetEntitySet<global::LightSwitchApplication.Implementation.Log>();
            }
        }
        public global::System.ServiceModel.DomainServices.Client.EntitySet<global::LightSwitchApplication.Implementation.NotificationRule> NotificationRuleEntityList
        {
            get
            {
                return base.EntityContainer.GetEntitySet<global::LightSwitchApplication.Implementation.NotificationRule>();
            }
        }
        public global::System.ServiceModel.DomainServices.Client.EntitySet<global::LightSwitchApplication.Implementation.Pin> PinEntityList
        {
            get
            {
                return base.EntityContainer.GetEntitySet<global::LightSwitchApplication.Implementation.Pin>();
            }
        }
        public global::System.ServiceModel.DomainServices.Client.EntitySet<global::LightSwitchApplication.Implementation.Procedure> ProcedureEntityList
        {
            get
            {
                return base.EntityContainer.GetEntitySet<global::LightSwitchApplication.Implementation.Procedure>();
            }
        }
        public global::System.ServiceModel.DomainServices.Client.EntitySet<global::LightSwitchApplication.Implementation.ProcedureCategory> ProcedureCategoryEntityList
        {
            get
            {
                return base.EntityContainer.GetEntitySet<global::LightSwitchApplication.Implementation.ProcedureCategory>();
            }
        }
        public global::System.ServiceModel.DomainServices.Client.EntitySet<global::LightSwitchApplication.Implementation.ExternalSource> ExternalSourceEntityList
        {
            get
            {
                return base.EntityContainer.GetEntitySet<global::LightSwitchApplication.Implementation.ExternalSource>();
            }
        }
        protected override global::System.ServiceModel.DomainServices.Client.EntityContainer CreateEntityContainer()
        {
            return new WcsDBEntityContainer();
        }
    
        internal sealed class WcsDBEntityContainer : global::System.ServiceModel.DomainServices.Client.EntityContainer
        {
            public WcsDBEntityContainer()
            {
                this.CreateEntitySet<global::LightSwitchApplication.Implementation.Configuration>(global::System.ServiceModel.DomainServices.Client.EntitySetOperations.All);
                this.CreateEntitySet<global::LightSwitchApplication.Implementation.ConfigurationLocation>(global::System.ServiceModel.DomainServices.Client.EntitySetOperations.All);
                this.CreateEntitySet<global::LightSwitchApplication.Implementation.ConfigurationType>(global::System.ServiceModel.DomainServices.Client.EntitySetOperations.All);
                this.CreateEntitySet<global::LightSwitchApplication.Implementation.Connection>(global::System.ServiceModel.DomainServices.Client.EntitySetOperations.All);
                this.CreateEntitySet<global::LightSwitchApplication.Implementation.Device>(global::System.ServiceModel.DomainServices.Client.EntitySetOperations.All);
                this.CreateEntitySet<global::LightSwitchApplication.Implementation.Location>(global::System.ServiceModel.DomainServices.Client.EntitySetOperations.All);
                this.CreateEntitySet<global::LightSwitchApplication.Implementation.Log>(global::System.ServiceModel.DomainServices.Client.EntitySetOperations.All);
                this.CreateEntitySet<global::LightSwitchApplication.Implementation.NotificationRule>(global::System.ServiceModel.DomainServices.Client.EntitySetOperations.All);
                this.CreateEntitySet<global::LightSwitchApplication.Implementation.Pin>(global::System.ServiceModel.DomainServices.Client.EntitySetOperations.All);
                this.CreateEntitySet<global::LightSwitchApplication.Implementation.Procedure>(global::System.ServiceModel.DomainServices.Client.EntitySetOperations.All);
                this.CreateEntitySet<global::LightSwitchApplication.Implementation.ProcedureCategory>(global::System.ServiceModel.DomainServices.Client.EntitySetOperations.All);
                this.CreateEntitySet<global::LightSwitchApplication.Implementation.ExternalSource>(global::System.ServiceModel.DomainServices.Client.EntitySetOperations.All);
            }
        }
    
        #region Service Contract Interface
    
        [global::System.ServiceModel.ServiceContract]
        public interface IWcsDBContract
        {
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/Configurations_Single", ReplyAction = "http://tempuri.org/WcsDBDomainService/Configurations_SingleResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/Configurations_SingleDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginConfigurations_Single(string frameworkOperators, global::System.Nullable<int> configurationId, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.Configuration> EndConfigurations_Single(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/Configurations_SingleOrDefault", ReplyAction = "http://tempuri.org/WcsDBDomainService/Configurations_SingleOrDefaultResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/Configurations_SingleOrDefaultDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginConfigurations_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> configurationId, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.Configuration> EndConfigurations_SingleOrDefault(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/Configurations_All", ReplyAction = "http://tempuri.org/WcsDBDomainService/Configurations_AllResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/Configurations_AllDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginConfigurations_All(string frameworkOperators, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.Configuration> EndConfigurations_All(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/ConfigurationLocations_Single", ReplyAction = "http://tempuri.org/WcsDBDomainService/ConfigurationLocations_SingleResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/ConfigurationLocations_SingleDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginConfigurationLocations_Single(string frameworkOperators, global::System.Nullable<int> configurationLocationId, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.ConfigurationLocation> EndConfigurationLocations_Single(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/ConfigurationLocations_SingleOrDefault", ReplyAction = "http://tempuri.org/WcsDBDomainService/ConfigurationLocations_SingleOrDefaultResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/ConfigurationLocations_SingleOrDefaultDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginConfigurationLocations_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> configurationLocationId, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.ConfigurationLocation> EndConfigurationLocations_SingleOrDefault(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/ConfigurationLocations_All", ReplyAction = "http://tempuri.org/WcsDBDomainService/ConfigurationLocations_AllResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/ConfigurationLocations_AllDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginConfigurationLocations_All(string frameworkOperators, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.ConfigurationLocation> EndConfigurationLocations_All(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/ConfigurationTypes_Single", ReplyAction = "http://tempuri.org/WcsDBDomainService/ConfigurationTypes_SingleResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/ConfigurationTypes_SingleDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginConfigurationTypes_Single(string frameworkOperators, global::System.Nullable<int> ConfigurationTypeId, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.ConfigurationType> EndConfigurationTypes_Single(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/ConfigurationTypes_SingleOrDefault", ReplyAction = "http://tempuri.org/WcsDBDomainService/ConfigurationTypes_SingleOrDefaultResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/ConfigurationTypes_SingleOrDefaultDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginConfigurationTypes_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> ConfigurationTypeId, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.ConfigurationType> EndConfigurationTypes_SingleOrDefault(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/ConfigurationTypes_All", ReplyAction = "http://tempuri.org/WcsDBDomainService/ConfigurationTypes_AllResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/ConfigurationTypes_AllDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginConfigurationTypes_All(string frameworkOperators, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.ConfigurationType> EndConfigurationTypes_All(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/Connections_Single", ReplyAction = "http://tempuri.org/WcsDBDomainService/Connections_SingleResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/Connections_SingleDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginConnections_Single(string frameworkOperators, global::System.Nullable<int> connectionId, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.Connection> EndConnections_Single(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/Connections_SingleOrDefault", ReplyAction = "http://tempuri.org/WcsDBDomainService/Connections_SingleOrDefaultResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/Connections_SingleOrDefaultDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginConnections_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> connectionId, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.Connection> EndConnections_SingleOrDefault(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/Connections_All", ReplyAction = "http://tempuri.org/WcsDBDomainService/Connections_AllResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/Connections_AllDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginConnections_All(string frameworkOperators, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.Connection> EndConnections_All(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/Devices_Single", ReplyAction = "http://tempuri.org/WcsDBDomainService/Devices_SingleResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/Devices_SingleDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginDevices_Single(string frameworkOperators, global::System.Nullable<int> deviceId, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.Device> EndDevices_Single(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/Devices_SingleOrDefault", ReplyAction = "http://tempuri.org/WcsDBDomainService/Devices_SingleOrDefaultResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/Devices_SingleOrDefaultDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginDevices_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> deviceId, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.Device> EndDevices_SingleOrDefault(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/Devices_All", ReplyAction = "http://tempuri.org/WcsDBDomainService/Devices_AllResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/Devices_AllDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginDevices_All(string frameworkOperators, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.Device> EndDevices_All(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/Locations_Single", ReplyAction = "http://tempuri.org/WcsDBDomainService/Locations_SingleResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/Locations_SingleDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginLocations_Single(string frameworkOperators, global::System.Nullable<int> locationId, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.Location> EndLocations_Single(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/Locations_SingleOrDefault", ReplyAction = "http://tempuri.org/WcsDBDomainService/Locations_SingleOrDefaultResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/Locations_SingleOrDefaultDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginLocations_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> locationId, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.Location> EndLocations_SingleOrDefault(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/Locations_All", ReplyAction = "http://tempuri.org/WcsDBDomainService/Locations_AllResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/Locations_AllDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginLocations_All(string frameworkOperators, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.Location> EndLocations_All(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/Logs_Single", ReplyAction = "http://tempuri.org/WcsDBDomainService/Logs_SingleResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/Logs_SingleDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginLogs_Single(string frameworkOperators, global::System.Nullable<int> logId, global::System.Nullable<global::System.DateTime> c_Date, string Thread, string Level, string Logger, string Message, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.Log> EndLogs_Single(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/Logs_SingleOrDefault", ReplyAction = "http://tempuri.org/WcsDBDomainService/Logs_SingleOrDefaultResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/Logs_SingleOrDefaultDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginLogs_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> logId, global::System.Nullable<global::System.DateTime> c_Date, string Thread, string Level, string Logger, string Message, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.Log> EndLogs_SingleOrDefault(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/Logs_All", ReplyAction = "http://tempuri.org/WcsDBDomainService/Logs_AllResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/Logs_AllDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginLogs_All(string frameworkOperators, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.Log> EndLogs_All(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/NotificationRules_Single", ReplyAction = "http://tempuri.org/WcsDBDomainService/NotificationRules_SingleResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/NotificationRules_SingleDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginNotificationRules_Single(string frameworkOperators, global::System.Nullable<int> notificationRuleId, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.NotificationRule> EndNotificationRules_Single(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/NotificationRules_SingleOrDefault", ReplyAction = "http://tempuri.org/WcsDBDomainService/NotificationRules_SingleOrDefaultResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/NotificationRules_SingleOrDefaultDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginNotificationRules_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> notificationRuleId, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.NotificationRule> EndNotificationRules_SingleOrDefault(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/NotificationRules_All", ReplyAction = "http://tempuri.org/WcsDBDomainService/NotificationRules_AllResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/NotificationRules_AllDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginNotificationRules_All(string frameworkOperators, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.NotificationRule> EndNotificationRules_All(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/Pins_Single", ReplyAction = "http://tempuri.org/WcsDBDomainService/Pins_SingleResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/Pins_SingleDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginPins_Single(string frameworkOperators, global::System.Nullable<int> pinId, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.Pin> EndPins_Single(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/Pins_SingleOrDefault", ReplyAction = "http://tempuri.org/WcsDBDomainService/Pins_SingleOrDefaultResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/Pins_SingleOrDefaultDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginPins_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> pinId, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.Pin> EndPins_SingleOrDefault(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/Pins_All", ReplyAction = "http://tempuri.org/WcsDBDomainService/Pins_AllResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/Pins_AllDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginPins_All(string frameworkOperators, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.Pin> EndPins_All(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/Procedures_Single", ReplyAction = "http://tempuri.org/WcsDBDomainService/Procedures_SingleResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/Procedures_SingleDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginProcedures_Single(string frameworkOperators, global::System.Nullable<int> procedureId, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.Procedure> EndProcedures_Single(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/Procedures_SingleOrDefault", ReplyAction = "http://tempuri.org/WcsDBDomainService/Procedures_SingleOrDefaultResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/Procedures_SingleOrDefaultDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginProcedures_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> procedureId, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.Procedure> EndProcedures_SingleOrDefault(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/Procedures_All", ReplyAction = "http://tempuri.org/WcsDBDomainService/Procedures_AllResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/Procedures_AllDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginProcedures_All(string frameworkOperators, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.Procedure> EndProcedures_All(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/ProcedureCategories_Single", ReplyAction = "http://tempuri.org/WcsDBDomainService/ProcedureCategories_SingleResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/ProcedureCategories_SingleDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginProcedureCategories_Single(string frameworkOperators, global::System.Nullable<int> procedureCategoryId, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.ProcedureCategory> EndProcedureCategories_Single(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/ProcedureCategories_SingleOrDefault", ReplyAction = "http://tempuri.org/WcsDBDomainService/ProcedureCategories_SingleOrDefaultResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/ProcedureCategories_SingleOrDefaultDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginProcedureCategories_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> procedureCategoryId, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.ProcedureCategory> EndProcedureCategories_SingleOrDefault(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/ProcedureCategories_All", ReplyAction = "http://tempuri.org/WcsDBDomainService/ProcedureCategories_AllResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/ProcedureCategories_AllDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginProcedureCategories_All(string frameworkOperators, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.ProcedureCategory> EndProcedureCategories_All(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/ExternalSources_Single", ReplyAction = "http://tempuri.org/WcsDBDomainService/ExternalSources_SingleResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/ExternalSources_SingleDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginExternalSources_Single(string frameworkOperators, global::System.Nullable<int> externalSourceId, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.ExternalSource> EndExternalSources_Single(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/ExternalSources_SingleOrDefault", ReplyAction = "http://tempuri.org/WcsDBDomainService/ExternalSources_SingleOrDefaultResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/ExternalSources_SingleOrDefaultDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginExternalSources_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> externalSourceId, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.ExternalSource> EndExternalSources_SingleOrDefault(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/ExternalSources_All", ReplyAction = "http://tempuri.org/WcsDBDomainService/ExternalSources_AllResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/ExternalSources_AllDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginExternalSources_All(string frameworkOperators, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.ExternalSource> EndExternalSources_All(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/SubmitChanges", ReplyAction = "http://tempuri.org/WcsDBDomainService/SubmitChangesResponse"),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/SubmitChangesDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginSubmitChanges(global::System.Collections.Generic.IEnumerable<global::System.ServiceModel.DomainServices.Client.ChangeSetEntry> changeSet, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.Collections.Generic.IEnumerable<global::System.ServiceModel.DomainServices.Client.ChangeSetEntry> EndSubmitChanges(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/__GetEntitySetCanInformation", ReplyAction = "http://tempuri.org/WcsDBDomainService/__GetEntitySetCanInformationResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/__GetEntitySetCanInformationDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult Begin__GetEntitySetCanInformation(string entitySetName, global::System.AsyncCallback callback, global::System.Object asyncState);
            int End__GetEntitySetCanInformation(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/WcsDBDomainService/__CanExecuteOperation", ReplyAction = "http://tempuri.org/WcsDBDomainService/__CanExecuteOperationResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/WcsDBDomainService/__CanExecuteOperationDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult Begin__CanExecuteOperation(string operationName, global::System.AsyncCallback callback, global::System.Object asyncState);
            bool End__CanExecuteOperation(global::System.IAsyncResult result);
            
        }
    
        #endregion
    
        protected override global::Microsoft.LightSwitch.Internal.IEntityImplementation CreateEntityImplementation<T>()
        {
            if (typeof(T) == typeof(global::LightSwitchApplication.Configuration))
            {
                return new global::LightSwitchApplication.Implementation.Configuration();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.ConfigurationLocation))
            {
                return new global::LightSwitchApplication.Implementation.ConfigurationLocation();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.ConfigurationType))
            {
                return new global::LightSwitchApplication.Implementation.ConfigurationType();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Connection))
            {
                return new global::LightSwitchApplication.Implementation.Connection();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Device))
            {
                return new global::LightSwitchApplication.Implementation.Device();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Location))
            {
                return new global::LightSwitchApplication.Implementation.Location();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Log))
            {
                return new global::LightSwitchApplication.Implementation.Log();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.NotificationRule))
            {
                return new global::LightSwitchApplication.Implementation.NotificationRule();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Pin))
            {
                return new global::LightSwitchApplication.Implementation.Pin();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Procedure))
            {
                return new global::LightSwitchApplication.Implementation.Procedure();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.ProcedureCategory))
            {
                return new global::LightSwitchApplication.Implementation.ProcedureCategory();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.ExternalSource))
            {
                return new global::LightSwitchApplication.Implementation.ExternalSource();
            }
            return null;
        }
    }
    #endregion
    
    #region DataServiceImplementationFactory
    [global::System.ComponentModel.Composition.PartCreationPolicy(global::System.ComponentModel.Composition.CreationPolicy.Shared)]
    [global::System.ComponentModel.Composition.Export(typeof(global::Microsoft.LightSwitch.Internal.IDataServiceFactory))]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class DataServiceFactory :
        global::Microsoft.LightSwitch.ClientGenerated.Implementation.DataServiceFactory
    {
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService(global::System.Type dataServiceType)
        {
            if (dataServiceType == typeof(global::LightSwitchApplication.WcsDB))
            {
                return new global::LightSwitchApplication.WcsDB();
            }
            return base.CreateDataService(dataServiceType);
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IDataServiceImplementation CreateDataServiceImplementation<TDataService>(TDataService dataService)
        {
            if (typeof(TDataService) == typeof(global::LightSwitchApplication.WcsDB))
            {
                return new global::LightSwitchApplication.Implementation.WcsDB(dataService);
            }
            return base.CreateDataServiceImplementation(dataService);
        }
    }
    #endregion
    
    [global::System.ComponentModel.Composition.PartCreationPolicy(global::System.ComponentModel.Composition.CreationPolicy.Shared)]
    [global::System.ComponentModel.Composition.Export(typeof(global::Microsoft.LightSwitch.Internal.ITypeMappingProvider))]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class __TypeMapping
        : global::Microsoft.LightSwitch.Internal.ITypeMappingProvider
    {
        global::System.Type global::Microsoft.LightSwitch.Internal.ITypeMappingProvider.GetImplementationType(global::System.Type definitionType)
        {
            if (typeof(global::LightSwitchApplication.Configuration) == definitionType)
            {
                return typeof(global::LightSwitchApplication.Implementation.Configuration);
            }
            if (typeof(global::LightSwitchApplication.ConfigurationLocation) == definitionType)
            {
                return typeof(global::LightSwitchApplication.Implementation.ConfigurationLocation);
            }
            if (typeof(global::LightSwitchApplication.ConfigurationType) == definitionType)
            {
                return typeof(global::LightSwitchApplication.Implementation.ConfigurationType);
            }
            if (typeof(global::LightSwitchApplication.Connection) == definitionType)
            {
                return typeof(global::LightSwitchApplication.Implementation.Connection);
            }
            if (typeof(global::LightSwitchApplication.Device) == definitionType)
            {
                return typeof(global::LightSwitchApplication.Implementation.Device);
            }
            if (typeof(global::LightSwitchApplication.Location) == definitionType)
            {
                return typeof(global::LightSwitchApplication.Implementation.Location);
            }
            if (typeof(global::LightSwitchApplication.Log) == definitionType)
            {
                return typeof(global::LightSwitchApplication.Implementation.Log);
            }
            if (typeof(global::LightSwitchApplication.NotificationRule) == definitionType)
            {
                return typeof(global::LightSwitchApplication.Implementation.NotificationRule);
            }
            if (typeof(global::LightSwitchApplication.Pin) == definitionType)
            {
                return typeof(global::LightSwitchApplication.Implementation.Pin);
            }
            if (typeof(global::LightSwitchApplication.Procedure) == definitionType)
            {
                return typeof(global::LightSwitchApplication.Implementation.Procedure);
            }
            if (typeof(global::LightSwitchApplication.ProcedureCategory) == definitionType)
            {
                return typeof(global::LightSwitchApplication.Implementation.ProcedureCategory);
            }
            if (typeof(global::LightSwitchApplication.ExternalSource) == definitionType)
            {
                return typeof(global::LightSwitchApplication.Implementation.ExternalSource);
            }
            return null;
        }
    }
}
