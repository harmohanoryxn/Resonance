//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using global::System.Linq;

namespace LightSwitchApplication.Implementation
{
    
    [global::System.ServiceModel.DomainServices.Hosting.EnableClientAccess()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class WcsDBDomainService
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DomainService<global::WcsDB.Implementation.WcsDBObjectContext>
    {
    
        public WcsDBDomainService() : base()
        {
        }
    
    #region Public Methods
    
    #region Configuration
    
        public void InsertConfiguration(global::WcsDB.Implementation.Configuration entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Configurations.AddObject(entity);
            }
        }
    
        public void UpdateConfiguration(global::WcsDB.Implementation.Configuration currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Configurations, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteConfiguration(global::WcsDB.Implementation.Configuration entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Configurations.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region ConfigurationLocation
    
        public void InsertConfigurationLocation(global::WcsDB.Implementation.ConfigurationLocation entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.ConfigurationLocations.AddObject(entity);
            }
        }
    
        public void UpdateConfigurationLocation(global::WcsDB.Implementation.ConfigurationLocation currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.ConfigurationLocations, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteConfigurationLocation(global::WcsDB.Implementation.ConfigurationLocation entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ConfigurationLocations.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region ConfigurationType
    
        public void InsertConfigurationType(global::WcsDB.Implementation.ConfigurationType entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.ConfigurationTypes.AddObject(entity);
            }
        }
    
        public void UpdateConfigurationType(global::WcsDB.Implementation.ConfigurationType currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.ConfigurationTypes, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteConfigurationType(global::WcsDB.Implementation.ConfigurationType entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ConfigurationTypes.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Connection
    
        public void InsertConnection(global::WcsDB.Implementation.Connection entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Connections.AddObject(entity);
            }
        }
    
        public void UpdateConnection(global::WcsDB.Implementation.Connection currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Connections, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteConnection(global::WcsDB.Implementation.Connection entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Connections.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Device
    
        public void InsertDevice(global::WcsDB.Implementation.Device entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Devices.AddObject(entity);
            }
        }
    
        public void UpdateDevice(global::WcsDB.Implementation.Device currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Devices, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteDevice(global::WcsDB.Implementation.Device entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Devices.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Location
    
        public void InsertLocation(global::WcsDB.Implementation.Location entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Locations.AddObject(entity);
            }
        }
    
        public void UpdateLocation(global::WcsDB.Implementation.Location currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Locations, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteLocation(global::WcsDB.Implementation.Location entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Locations.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Log
    
        public void InsertLog(global::WcsDB.Implementation.Log entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Logs.AddObject(entity);
            }
        }
    
        public void UpdateLog(global::WcsDB.Implementation.Log currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Logs, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteLog(global::WcsDB.Implementation.Log entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Logs.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region NotificationRule
    
        public void InsertNotificationRule(global::WcsDB.Implementation.NotificationRule entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.NotificationRules.AddObject(entity);
            }
        }
    
        public void UpdateNotificationRule(global::WcsDB.Implementation.NotificationRule currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.NotificationRules, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteNotificationRule(global::WcsDB.Implementation.NotificationRule entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.NotificationRules.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Pin
    
        public void InsertPin(global::WcsDB.Implementation.Pin entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Pins.AddObject(entity);
            }
        }
    
        public void UpdatePin(global::WcsDB.Implementation.Pin currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Pins, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeletePin(global::WcsDB.Implementation.Pin entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Pins.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Procedure
    
        public void InsertProcedure(global::WcsDB.Implementation.Procedure entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Procedures.AddObject(entity);
            }
        }
    
        public void UpdateProcedure(global::WcsDB.Implementation.Procedure currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Procedures, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteProcedure(global::WcsDB.Implementation.Procedure entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Procedures.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region ProcedureCategory
    
        public void InsertProcedureCategory(global::WcsDB.Implementation.ProcedureCategory entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.ProcedureCategories.AddObject(entity);
            }
        }
    
        public void UpdateProcedureCategory(global::WcsDB.Implementation.ProcedureCategory currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.ProcedureCategories, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteProcedureCategory(global::WcsDB.Implementation.ProcedureCategory entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ProcedureCategories.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region ExternalSource
    
        public void InsertExternalSource(global::WcsDB.Implementation.ExternalSource entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.ExternalSources.AddObject(entity);
            }
        }
    
        public void UpdateExternalSource(global::WcsDB.Implementation.ExternalSource currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.ExternalSources, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteExternalSource(global::WcsDB.Implementation.ExternalSource entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ExternalSources.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Queries
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Configuration> Configurations_Single(string frameworkOperators, global::System.Nullable<int> configurationId)
        {
            return this.GetQuery<global::WcsDB.Implementation.Configuration>("Configurations_Single", frameworkOperators, configurationId);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Configuration> Configurations_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> configurationId)
        {
            return this.GetQuery<global::WcsDB.Implementation.Configuration>("Configurations_SingleOrDefault", frameworkOperators, configurationId);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Configuration> Configurations_All(string frameworkOperators)
        {
            return this.GetQuery<global::WcsDB.Implementation.Configuration>("Configurations_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.ConfigurationLocation> ConfigurationLocations_Single(string frameworkOperators, global::System.Nullable<int> configurationLocationId)
        {
            return this.GetQuery<global::WcsDB.Implementation.ConfigurationLocation>("ConfigurationLocations_Single", frameworkOperators, configurationLocationId);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.ConfigurationLocation> ConfigurationLocations_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> configurationLocationId)
        {
            return this.GetQuery<global::WcsDB.Implementation.ConfigurationLocation>("ConfigurationLocations_SingleOrDefault", frameworkOperators, configurationLocationId);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.ConfigurationLocation> ConfigurationLocations_All(string frameworkOperators)
        {
            return this.GetQuery<global::WcsDB.Implementation.ConfigurationLocation>("ConfigurationLocations_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.ConfigurationType> ConfigurationTypes_Single(string frameworkOperators, global::System.Nullable<int> ConfigurationTypeId)
        {
            return this.GetQuery<global::WcsDB.Implementation.ConfigurationType>("ConfigurationTypes_Single", frameworkOperators, ConfigurationTypeId);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.ConfigurationType> ConfigurationTypes_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> ConfigurationTypeId)
        {
            return this.GetQuery<global::WcsDB.Implementation.ConfigurationType>("ConfigurationTypes_SingleOrDefault", frameworkOperators, ConfigurationTypeId);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.ConfigurationType> ConfigurationTypes_All(string frameworkOperators)
        {
            return this.GetQuery<global::WcsDB.Implementation.ConfigurationType>("ConfigurationTypes_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Connection> Connections_Single(string frameworkOperators, global::System.Nullable<int> connectionId)
        {
            return this.GetQuery<global::WcsDB.Implementation.Connection>("Connections_Single", frameworkOperators, connectionId);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Connection> Connections_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> connectionId)
        {
            return this.GetQuery<global::WcsDB.Implementation.Connection>("Connections_SingleOrDefault", frameworkOperators, connectionId);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Connection> Connections_All(string frameworkOperators)
        {
            return this.GetQuery<global::WcsDB.Implementation.Connection>("Connections_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Device> Devices_Single(string frameworkOperators, global::System.Nullable<int> deviceId)
        {
            return this.GetQuery<global::WcsDB.Implementation.Device>("Devices_Single", frameworkOperators, deviceId);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Device> Devices_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> deviceId)
        {
            return this.GetQuery<global::WcsDB.Implementation.Device>("Devices_SingleOrDefault", frameworkOperators, deviceId);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Device> Devices_All(string frameworkOperators)
        {
            return this.GetQuery<global::WcsDB.Implementation.Device>("Devices_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Location> Locations_Single(string frameworkOperators, global::System.Nullable<int> locationId)
        {
            return this.GetQuery<global::WcsDB.Implementation.Location>("Locations_Single", frameworkOperators, locationId);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Location> Locations_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> locationId)
        {
            return this.GetQuery<global::WcsDB.Implementation.Location>("Locations_SingleOrDefault", frameworkOperators, locationId);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Location> Locations_All(string frameworkOperators)
        {
            return this.GetQuery<global::WcsDB.Implementation.Location>("Locations_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Log> Logs_Single(string frameworkOperators, global::System.Nullable<int> logId, global::System.Nullable<global::System.DateTime> c_Date, string Thread, string Level, string Logger, string Message)
        {
            return this.GetQuery<global::WcsDB.Implementation.Log>("Logs_Single", frameworkOperators, logId, c_Date, Thread, Level, Logger, Message);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Log> Logs_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> logId, global::System.Nullable<global::System.DateTime> c_Date, string Thread, string Level, string Logger, string Message)
        {
            return this.GetQuery<global::WcsDB.Implementation.Log>("Logs_SingleOrDefault", frameworkOperators, logId, c_Date, Thread, Level, Logger, Message);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Log> Logs_All(string frameworkOperators)
        {
            return this.GetQuery<global::WcsDB.Implementation.Log>("Logs_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.NotificationRule> NotificationRules_Single(string frameworkOperators, global::System.Nullable<int> notificationRuleId)
        {
            return this.GetQuery<global::WcsDB.Implementation.NotificationRule>("NotificationRules_Single", frameworkOperators, notificationRuleId);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.NotificationRule> NotificationRules_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> notificationRuleId)
        {
            return this.GetQuery<global::WcsDB.Implementation.NotificationRule>("NotificationRules_SingleOrDefault", frameworkOperators, notificationRuleId);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.NotificationRule> NotificationRules_All(string frameworkOperators)
        {
            return this.GetQuery<global::WcsDB.Implementation.NotificationRule>("NotificationRules_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Pin> Pins_Single(string frameworkOperators, global::System.Nullable<int> pinId)
        {
            return this.GetQuery<global::WcsDB.Implementation.Pin>("Pins_Single", frameworkOperators, pinId);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Pin> Pins_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> pinId)
        {
            return this.GetQuery<global::WcsDB.Implementation.Pin>("Pins_SingleOrDefault", frameworkOperators, pinId);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Pin> Pins_All(string frameworkOperators)
        {
            return this.GetQuery<global::WcsDB.Implementation.Pin>("Pins_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Procedure> Procedures_Single(string frameworkOperators, global::System.Nullable<int> procedureId)
        {
            return this.GetQuery<global::WcsDB.Implementation.Procedure>("Procedures_Single", frameworkOperators, procedureId);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Procedure> Procedures_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> procedureId)
        {
            return this.GetQuery<global::WcsDB.Implementation.Procedure>("Procedures_SingleOrDefault", frameworkOperators, procedureId);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Procedure> Procedures_All(string frameworkOperators)
        {
            return this.GetQuery<global::WcsDB.Implementation.Procedure>("Procedures_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.ProcedureCategory> ProcedureCategories_Single(string frameworkOperators, global::System.Nullable<int> procedureCategoryId)
        {
            return this.GetQuery<global::WcsDB.Implementation.ProcedureCategory>("ProcedureCategories_Single", frameworkOperators, procedureCategoryId);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.ProcedureCategory> ProcedureCategories_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> procedureCategoryId)
        {
            return this.GetQuery<global::WcsDB.Implementation.ProcedureCategory>("ProcedureCategories_SingleOrDefault", frameworkOperators, procedureCategoryId);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.ProcedureCategory> ProcedureCategories_All(string frameworkOperators)
        {
            return this.GetQuery<global::WcsDB.Implementation.ProcedureCategory>("ProcedureCategories_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.ExternalSource> ExternalSources_Single(string frameworkOperators, global::System.Nullable<int> externalSourceId)
        {
            return this.GetQuery<global::WcsDB.Implementation.ExternalSource>("ExternalSources_Single", frameworkOperators, externalSourceId);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.ExternalSource> ExternalSources_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> externalSourceId)
        {
            return this.GetQuery<global::WcsDB.Implementation.ExternalSource>("ExternalSources_SingleOrDefault", frameworkOperators, externalSourceId);
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.ExternalSource> ExternalSources_All(string frameworkOperators)
        {
            return this.GetQuery<global::WcsDB.Implementation.ExternalSource>("ExternalSources_All", frameworkOperators);
        }
    
    #endregion
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public int __GetEntitySetCanInformation(string entitySetName)
        {
            return base.GetEntitySetCanInformation(entitySetName);
        }
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public bool __CanExecuteOperation(string operationName)
        {
            return base.CanExecuteOperation(operationName);
        }
    
    #endregion
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService()
        {
            return new global::LightSwitchApplication.DataWorkspace().WcsDB;
        }
    
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class WcsDBServiceImplementation
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DataServiceImplementation<global::WcsDB.Implementation.WcsDBObjectContext>
    {
        public WcsDBServiceImplementation(global::Microsoft.LightSwitch.IDataService dataService) : base(dataService)
        {
        }
    
    #region Queries
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Configuration> Configurations_Single(global::System.Nullable<int> configurationId)
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.Configuration> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::WcsDB.Implementation.Configuration>("Configurations_All"),
                (c) => (configurationId.HasValue && (c.configurationId == configurationId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Configuration> Configurations_SingleOrDefault(global::System.Nullable<int> configurationId)
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.Configuration> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::WcsDB.Implementation.Configuration>("Configurations_All"),
                (c) => (configurationId.HasValue && (c.configurationId == configurationId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Configuration> Configurations_All()
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.Configuration> query;
            query = base.CreateQuery<global::WcsDB.Implementation.Configuration>("[Configurations]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.ConfigurationLocation> ConfigurationLocations_Single(global::System.Nullable<int> configurationLocationId)
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.ConfigurationLocation> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::WcsDB.Implementation.ConfigurationLocation>("ConfigurationLocations_All"),
                (c) => (configurationLocationId.HasValue && (c.configurationLocationId == configurationLocationId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.ConfigurationLocation> ConfigurationLocations_SingleOrDefault(global::System.Nullable<int> configurationLocationId)
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.ConfigurationLocation> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::WcsDB.Implementation.ConfigurationLocation>("ConfigurationLocations_All"),
                (c) => (configurationLocationId.HasValue && (c.configurationLocationId == configurationLocationId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.ConfigurationLocation> ConfigurationLocations_All()
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.ConfigurationLocation> query;
            query = base.CreateQuery<global::WcsDB.Implementation.ConfigurationLocation>("[ConfigurationLocations]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.ConfigurationType> ConfigurationTypes_Single(global::System.Nullable<int> ConfigurationTypeId)
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.ConfigurationType> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::WcsDB.Implementation.ConfigurationType>("ConfigurationTypes_All"),
                (c) => (ConfigurationTypeId.HasValue && (c.ConfigurationTypeId == ConfigurationTypeId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.ConfigurationType> ConfigurationTypes_SingleOrDefault(global::System.Nullable<int> ConfigurationTypeId)
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.ConfigurationType> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::WcsDB.Implementation.ConfigurationType>("ConfigurationTypes_All"),
                (c) => (ConfigurationTypeId.HasValue && (c.ConfigurationTypeId == ConfigurationTypeId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.ConfigurationType> ConfigurationTypes_All()
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.ConfigurationType> query;
            query = base.CreateQuery<global::WcsDB.Implementation.ConfigurationType>("[ConfigurationTypes]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Connection> Connections_Single(global::System.Nullable<int> connectionId)
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.Connection> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::WcsDB.Implementation.Connection>("Connections_All"),
                (c) => (connectionId.HasValue && (c.connectionId == connectionId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Connection> Connections_SingleOrDefault(global::System.Nullable<int> connectionId)
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.Connection> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::WcsDB.Implementation.Connection>("Connections_All"),
                (c) => (connectionId.HasValue && (c.connectionId == connectionId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Connection> Connections_All()
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.Connection> query;
            query = base.CreateQuery<global::WcsDB.Implementation.Connection>("[Connections]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Device> Devices_Single(global::System.Nullable<int> deviceId)
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.Device> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::WcsDB.Implementation.Device>("Devices_All"),
                (d) => (deviceId.HasValue && (d.deviceId == deviceId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Device> Devices_SingleOrDefault(global::System.Nullable<int> deviceId)
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.Device> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::WcsDB.Implementation.Device>("Devices_All"),
                (d) => (deviceId.HasValue && (d.deviceId == deviceId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Device> Devices_All()
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.Device> query;
            query = base.CreateQuery<global::WcsDB.Implementation.Device>("[Devices]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Location> Locations_Single(global::System.Nullable<int> locationId)
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.Location> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::WcsDB.Implementation.Location>("Locations_All"),
                (l) => (locationId.HasValue && (l.locationId == locationId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Location> Locations_SingleOrDefault(global::System.Nullable<int> locationId)
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.Location> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::WcsDB.Implementation.Location>("Locations_All"),
                (l) => (locationId.HasValue && (l.locationId == locationId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Location> Locations_All()
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.Location> query;
            query = base.CreateQuery<global::WcsDB.Implementation.Location>("[Locations]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Log> Logs_Single(global::System.Nullable<int> logId, global::System.Nullable<global::System.DateTime> c_Date, string Thread, string Level, string Logger, string Message)
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.Log> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::WcsDB.Implementation.Log>("Logs_All"),
                (l) => ((((((l.Message.CompareTo(Message) == 0) && (l.Logger.CompareTo(Logger) == 0)) && (l.Level.CompareTo(Level) == 0)) && (l.Thread.CompareTo(Thread) == 0)) && (c_Date.HasValue && (l.c_Date == c_Date))) && (logId.HasValue && (l.logId == logId))));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Log> Logs_SingleOrDefault(global::System.Nullable<int> logId, global::System.Nullable<global::System.DateTime> c_Date, string Thread, string Level, string Logger, string Message)
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.Log> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::WcsDB.Implementation.Log>("Logs_All"),
                (l) => ((((((l.Message.CompareTo(Message) == 0) && (l.Logger.CompareTo(Logger) == 0)) && (l.Level.CompareTo(Level) == 0)) && (l.Thread.CompareTo(Thread) == 0)) && (c_Date.HasValue && (l.c_Date == c_Date))) && (logId.HasValue && (l.logId == logId))));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Log> Logs_All()
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.Log> query;
            query = base.CreateQuery<global::WcsDB.Implementation.Log>("[Logs]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.NotificationRule> NotificationRules_Single(global::System.Nullable<int> notificationRuleId)
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.NotificationRule> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::WcsDB.Implementation.NotificationRule>("NotificationRules_All"),
                (n) => (notificationRuleId.HasValue && (n.notificationRuleId == notificationRuleId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.NotificationRule> NotificationRules_SingleOrDefault(global::System.Nullable<int> notificationRuleId)
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.NotificationRule> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::WcsDB.Implementation.NotificationRule>("NotificationRules_All"),
                (n) => (notificationRuleId.HasValue && (n.notificationRuleId == notificationRuleId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.NotificationRule> NotificationRules_All()
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.NotificationRule> query;
            query = base.CreateQuery<global::WcsDB.Implementation.NotificationRule>("[NotificationRules]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Pin> Pins_Single(global::System.Nullable<int> pinId)
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.Pin> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::WcsDB.Implementation.Pin>("Pins_All"),
                (p) => (pinId.HasValue && (p.pinId == pinId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Pin> Pins_SingleOrDefault(global::System.Nullable<int> pinId)
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.Pin> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::WcsDB.Implementation.Pin>("Pins_All"),
                (p) => (pinId.HasValue && (p.pinId == pinId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Pin> Pins_All()
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.Pin> query;
            query = base.CreateQuery<global::WcsDB.Implementation.Pin>("[Pins]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Procedure> Procedures_Single(global::System.Nullable<int> procedureId)
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.Procedure> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::WcsDB.Implementation.Procedure>("Procedures_All"),
                (p) => (procedureId.HasValue && (p.procedureId == procedureId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Procedure> Procedures_SingleOrDefault(global::System.Nullable<int> procedureId)
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.Procedure> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::WcsDB.Implementation.Procedure>("Procedures_All"),
                (p) => (procedureId.HasValue && (p.procedureId == procedureId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.Procedure> Procedures_All()
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.Procedure> query;
            query = base.CreateQuery<global::WcsDB.Implementation.Procedure>("[Procedures]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.ProcedureCategory> ProcedureCategories_Single(global::System.Nullable<int> procedureCategoryId)
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.ProcedureCategory> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::WcsDB.Implementation.ProcedureCategory>("ProcedureCategories_All"),
                (p) => (procedureCategoryId.HasValue && (p.procedureCategoryId == procedureCategoryId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.ProcedureCategory> ProcedureCategories_SingleOrDefault(global::System.Nullable<int> procedureCategoryId)
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.ProcedureCategory> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::WcsDB.Implementation.ProcedureCategory>("ProcedureCategories_All"),
                (p) => (procedureCategoryId.HasValue && (p.procedureCategoryId == procedureCategoryId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.ProcedureCategory> ProcedureCategories_All()
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.ProcedureCategory> query;
            query = base.CreateQuery<global::WcsDB.Implementation.ProcedureCategory>("[ProcedureCategories]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.ExternalSource> ExternalSources_Single(global::System.Nullable<int> externalSourceId)
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.ExternalSource> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::WcsDB.Implementation.ExternalSource>("ExternalSources_All"),
                (e) => (externalSourceId.HasValue && (e.externalSourceId == externalSourceId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.ExternalSource> ExternalSources_SingleOrDefault(global::System.Nullable<int> externalSourceId)
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.ExternalSource> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::WcsDB.Implementation.ExternalSource>("ExternalSources_All"),
                (e) => (externalSourceId.HasValue && (e.externalSourceId == externalSourceId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::WcsDB.Implementation.ExternalSource> ExternalSources_All()
        {
            global::System.Linq.IQueryable<global::WcsDB.Implementation.ExternalSource> query;
            query = base.CreateQuery<global::WcsDB.Implementation.ExternalSource>("[ExternalSources]").AsQueryable();
            return query;
        }
    
    #endregion

    #region Protected Methods
        protected override object CreateObject(global::System.Type type)
        {
            if (type == typeof(global::WcsDB.Implementation.Configuration))
            {
                return new global::WcsDB.Implementation.Configuration();
            }
            if (type == typeof(global::WcsDB.Implementation.ConfigurationLocation))
            {
                return new global::WcsDB.Implementation.ConfigurationLocation();
            }
            if (type == typeof(global::WcsDB.Implementation.ConfigurationType))
            {
                return new global::WcsDB.Implementation.ConfigurationType();
            }
            if (type == typeof(global::WcsDB.Implementation.Connection))
            {
                return new global::WcsDB.Implementation.Connection();
            }
            if (type == typeof(global::WcsDB.Implementation.Device))
            {
                return new global::WcsDB.Implementation.Device();
            }
            if (type == typeof(global::WcsDB.Implementation.Location))
            {
                return new global::WcsDB.Implementation.Location();
            }
            if (type == typeof(global::WcsDB.Implementation.Log))
            {
                return new global::WcsDB.Implementation.Log();
            }
            if (type == typeof(global::WcsDB.Implementation.NotificationRule))
            {
                return new global::WcsDB.Implementation.NotificationRule();
            }
            if (type == typeof(global::WcsDB.Implementation.Pin))
            {
                return new global::WcsDB.Implementation.Pin();
            }
            if (type == typeof(global::WcsDB.Implementation.Procedure))
            {
                return new global::WcsDB.Implementation.Procedure();
            }
            if (type == typeof(global::WcsDB.Implementation.ProcedureCategory))
            {
                return new global::WcsDB.Implementation.ProcedureCategory();
            }
            if (type == typeof(global::WcsDB.Implementation.ExternalSource))
            {
                return new global::WcsDB.Implementation.ExternalSource();
            }
    
            return base.CreateObject(type);
        }
    
        protected override global::WcsDB.Implementation.WcsDBObjectContext CreateObjectContext()
        {
            return new global::WcsDB.Implementation.WcsDBObjectContext(base.GetEntityConnectionString(
                "WcsDB", 
                "res://*/WcsDB.csdl|res://*/WcsDB.ssdl|res://*/WcsDB.msl",
                "System.Data.SqlClient"));
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IEntityImplementation CreateEntityImplementation<T>()
        {
            if (typeof(T) == typeof(global::LightSwitchApplication.Configuration))
            {
                return new global::WcsDB.Implementation.Configuration();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.ConfigurationLocation))
            {
                return new global::WcsDB.Implementation.ConfigurationLocation();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.ConfigurationType))
            {
                return new global::WcsDB.Implementation.ConfigurationType();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Connection))
            {
                return new global::WcsDB.Implementation.Connection();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Device))
            {
                return new global::WcsDB.Implementation.Device();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Location))
            {
                return new global::WcsDB.Implementation.Location();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Log))
            {
                return new global::WcsDB.Implementation.Log();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.NotificationRule))
            {
                return new global::WcsDB.Implementation.NotificationRule();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Pin))
            {
                return new global::WcsDB.Implementation.Pin();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Procedure))
            {
                return new global::WcsDB.Implementation.Procedure();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.ProcedureCategory))
            {
                return new global::WcsDB.Implementation.ProcedureCategory();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.ExternalSource))
            {
                return new global::WcsDB.Implementation.ExternalSource();
            }
            return null;
        }
    
    #endregion
    
    }
    
    #region DataServiceImplementationFactory
    [global::System.ComponentModel.Composition.PartCreationPolicy(global::System.ComponentModel.Composition.CreationPolicy.Shared)]
    [global::System.ComponentModel.Composition.Export(typeof(global::Microsoft.LightSwitch.Internal.IDataServiceFactory))]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class DataServiceFactory :
        global::Microsoft.LightSwitch.ServerGenerated.Implementation.DataServiceFactory
    {
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService(global::System.Type dataServiceType)
        {
            if (dataServiceType == typeof(global::LightSwitchApplication.WcsDB))
            {
                return new global::LightSwitchApplication.WcsDBService();
            }
            return base.CreateDataService(dataServiceType);
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IDataServiceImplementation CreateDataServiceImplementation<TDataService>(TDataService dataService)
        {
            if (typeof(TDataService) == typeof(global::LightSwitchApplication.WcsDB))
            {
                return new global::LightSwitchApplication.Implementation.WcsDBServiceImplementation(dataService);
            }
            return base.CreateDataServiceImplementation(dataService);
        }
    }
    #endregion
    
    [global::System.ComponentModel.Composition.PartCreationPolicy(global::System.ComponentModel.Composition.CreationPolicy.Shared)]
    [global::System.ComponentModel.Composition.Export(typeof(global::Microsoft.LightSwitch.Internal.ITypeMappingProvider))]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class __TypeMapping
        : global::Microsoft.LightSwitch.Internal.ITypeMappingProvider
    {
        global::System.Type global::Microsoft.LightSwitch.Internal.ITypeMappingProvider.GetImplementationType(global::System.Type definitionType)
        {
            if (typeof(global::LightSwitchApplication.Configuration) == definitionType)
            {
                return typeof(global::WcsDB.Implementation.Configuration);
            }
            if (typeof(global::LightSwitchApplication.ConfigurationLocation) == definitionType)
            {
                return typeof(global::WcsDB.Implementation.ConfigurationLocation);
            }
            if (typeof(global::LightSwitchApplication.ConfigurationType) == definitionType)
            {
                return typeof(global::WcsDB.Implementation.ConfigurationType);
            }
            if (typeof(global::LightSwitchApplication.Connection) == definitionType)
            {
                return typeof(global::WcsDB.Implementation.Connection);
            }
            if (typeof(global::LightSwitchApplication.Device) == definitionType)
            {
                return typeof(global::WcsDB.Implementation.Device);
            }
            if (typeof(global::LightSwitchApplication.Location) == definitionType)
            {
                return typeof(global::WcsDB.Implementation.Location);
            }
            if (typeof(global::LightSwitchApplication.Log) == definitionType)
            {
                return typeof(global::WcsDB.Implementation.Log);
            }
            if (typeof(global::LightSwitchApplication.NotificationRule) == definitionType)
            {
                return typeof(global::WcsDB.Implementation.NotificationRule);
            }
            if (typeof(global::LightSwitchApplication.Pin) == definitionType)
            {
                return typeof(global::WcsDB.Implementation.Pin);
            }
            if (typeof(global::LightSwitchApplication.Procedure) == definitionType)
            {
                return typeof(global::WcsDB.Implementation.Procedure);
            }
            if (typeof(global::LightSwitchApplication.ProcedureCategory) == definitionType)
            {
                return typeof(global::WcsDB.Implementation.ProcedureCategory);
            }
            if (typeof(global::LightSwitchApplication.ExternalSource) == definitionType)
            {
                return typeof(global::WcsDB.Implementation.ExternalSource);
            }
            return null;
        }
    }
}

namespace WcsDB.Implementation
{

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::WcsDB.Implementation.Configuration.Metadata))]
    public partial class Configuration :
        global::LightSwitchApplication.Configuration.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.Configuration.DetailsClass.IImplementation.ConfigurationLocations
        {
            get
            {
                return this.ConfigurationLocations;
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Configuration.DetailsClass.IImplementation.ConfigurationType
        {
            get
            {
                return this.ConfigurationType;
            }
            set
            {
                this.ConfigurationType = (global::WcsDB.Implementation.ConfigurationType)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("ConfigurationType");
                }
            }
        }
        
        partial void OnConfigurationType_ConfigurationTypeIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("ConfigurationType");
            }
        }
        
        global::System.Collections.IEnumerable global::LightSwitchApplication.Configuration.DetailsClass.IImplementation.Devices
        {
            get
            {
                return this.Devices;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::WcsDB.Implementation.ConfigurationType ConfigurationType { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::WcsDB.Implementation.ConfigurationLocation.Metadata))]
    public partial class ConfigurationLocation :
        global::LightSwitchApplication.ConfigurationLocation.DetailsClass.IImplementation
    {
    
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.ConfigurationLocation.DetailsClass.IImplementation.Configuration
        {
            get
            {
                return this.Configuration;
            }
            set
            {
                this.Configuration = (global::WcsDB.Implementation.Configuration)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Configuration");
                }
            }
        }
        
        partial void OnconfigurationIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Configuration");
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.ConfigurationLocation.DetailsClass.IImplementation.Location
        {
            get
            {
                return this.Location;
            }
            set
            {
                this.Location = (global::WcsDB.Implementation.Location)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Location");
                }
            }
        }
        
        partial void OnlocationIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Location");
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::WcsDB.Implementation.Configuration Configuration { get; set; }
        
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::WcsDB.Implementation.Location Location { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class ConfigurationType :
        global::LightSwitchApplication.ConfigurationType.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.ConfigurationType.DetailsClass.IImplementation.Configurations
        {
            get
            {
                return this.Configurations;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::WcsDB.Implementation.Connection.Metadata))]
    public partial class Connection :
        global::LightSwitchApplication.Connection.DetailsClass.IImplementation
    {
    
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Connection.DetailsClass.IImplementation.Device
        {
            get
            {
                return this.Device;
            }
            set
            {
                this.Device = (global::WcsDB.Implementation.Device)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Device");
                }
            }
        }
        
        partial void OndeviceIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Device");
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::WcsDB.Implementation.Device Device { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::WcsDB.Implementation.Device.Metadata))]
    public partial class Device :
        global::LightSwitchApplication.Device.DetailsClass.IImplementation
    {
    
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Device.DetailsClass.IImplementation.Configuration
        {
            get
            {
                return this.Configuration;
            }
            set
            {
                this.Configuration = (global::WcsDB.Implementation.Configuration)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Configuration");
                }
            }
        }
        
        partial void OnconfigurationIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Configuration");
            }
        }
        
        global::System.Collections.IEnumerable global::LightSwitchApplication.Device.DetailsClass.IImplementation.Connections
        {
            get
            {
                return this.Connections;
            }
        }
        
        global::System.Collections.IEnumerable global::LightSwitchApplication.Device.DetailsClass.IImplementation.Pins
        {
            get
            {
                return this.Pins;
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Device.DetailsClass.IImplementation.Location
        {
            get
            {
                return this.Location;
            }
            set
            {
                this.Location = (global::WcsDB.Implementation.Location)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Location");
                }
            }
        }
        
        partial void OnlocationIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Location");
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::WcsDB.Implementation.Configuration Configuration { get; set; }
        
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::WcsDB.Implementation.Location Location { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Location :
        global::LightSwitchApplication.Location.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.Location.DetailsClass.IImplementation.ConfigurationLocations
        {
            get
            {
                return this.ConfigurationLocations;
            }
        }
        
        global::System.Collections.IEnumerable global::LightSwitchApplication.Location.DetailsClass.IImplementation.Devices
        {
            get
            {
                return this.Devices;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Log :
        global::LightSwitchApplication.Log.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::WcsDB.Implementation.NotificationRule.Metadata))]
    public partial class NotificationRule :
        global::LightSwitchApplication.NotificationRule.DetailsClass.IImplementation
    {
    
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.NotificationRule.DetailsClass.IImplementation.Procedure
        {
            get
            {
                return this.Procedure;
            }
            set
            {
                this.Procedure = (global::WcsDB.Implementation.Procedure)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Procedure");
                }
            }
        }
        
        partial void OnProcedure_procedureIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Procedure");
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::WcsDB.Implementation.Procedure Procedure { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::WcsDB.Implementation.Pin.Metadata))]
    public partial class Pin :
        global::LightSwitchApplication.Pin.DetailsClass.IImplementation
    {
    
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Pin.DetailsClass.IImplementation.Device
        {
            get
            {
                return this.Device;
            }
            set
            {
                this.Device = (global::WcsDB.Implementation.Device)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Device");
                }
            }
        }
        
        partial void OnDevice_deviceIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Device");
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::WcsDB.Implementation.Device Device { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::WcsDB.Implementation.Procedure.Metadata))]
    public partial class Procedure :
        global::LightSwitchApplication.Procedure.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.Procedure.DetailsClass.IImplementation.NotificationRules
        {
            get
            {
                return this.NotificationRules;
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Procedure.DetailsClass.IImplementation.ProcedureCategory
        {
            get
            {
                return this.ProcedureCategory;
            }
            set
            {
                this.ProcedureCategory = (global::WcsDB.Implementation.ProcedureCategory)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("ProcedureCategory");
                }
            }
        }
        
        partial void OnProcedureCategory_procedureCategoryIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("ProcedureCategory");
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Procedure.DetailsClass.IImplementation.ExternalSource
        {
            get
            {
                return this.ExternalSource;
            }
            set
            {
                this.ExternalSource = (global::WcsDB.Implementation.ExternalSource)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("ExternalSource");
                }
            }
        }
        
        partial void OnexternalSourceIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("ExternalSource");
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::WcsDB.Implementation.ProcedureCategory ProcedureCategory { get; set; }
        
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::WcsDB.Implementation.ExternalSource ExternalSource { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::WcsDB.Implementation.ProcedureCategory.Metadata))]
    public partial class ProcedureCategory :
        global::LightSwitchApplication.ProcedureCategory.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.ProcedureCategory.DetailsClass.IImplementation.Procedures
        {
            get
            {
                return this.Procedures;
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.ProcedureCategory.DetailsClass.IImplementation.ExternalSource
        {
            get
            {
                return this.ExternalSource;
            }
            set
            {
                this.ExternalSource = (global::WcsDB.Implementation.ExternalSource)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("ExternalSource");
                }
            }
        }
        
        partial void OnexternalSourceIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("ExternalSource");
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::WcsDB.Implementation.ExternalSource ExternalSource { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class ExternalSource :
        global::LightSwitchApplication.ExternalSource.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.ExternalSource.DetailsClass.IImplementation.Procedures
        {
            get
            {
                return this.Procedures;
            }
        }
        
        global::System.Collections.IEnumerable global::LightSwitchApplication.ExternalSource.DetailsClass.IImplementation.ProcedureCategories
        {
            get
            {
                return this.ProcedureCategories;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
}

