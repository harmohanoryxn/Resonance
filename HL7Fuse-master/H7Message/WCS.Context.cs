//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace H7Message
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class WCSEntities : DbContext
    {
        public WCSEntities()
            : base("name=WCSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__RefactorLog> C__RefactorLog { get; set; }
        public virtual DbSet<Admission_tbl> Admission_tbl { get; set; }
        public virtual DbSet<tbl_AdmissionStatus> tbl_AdmissionStatus { get; set; }
        public virtual DbSet<tbl_AdmissionType> tbl_AdmissionType { get; set; }
        public virtual DbSet<Bed> Beds { get; set; }
        public virtual DbSet<BedCleaningEvent> BedCleaningEvents { get; set; }
        public virtual DbSet<BedCleaningEventType> BedCleaningEventTypes { get; set; }
        public virtual DbSet<Configuration> Configurations { get; set; }
        public virtual DbSet<ConfigurationLocation> ConfigurationLocations { get; set; }
        public virtual DbSet<ConfigurationType> ConfigurationTypes { get; set; }
        public virtual DbSet<Connection> Connections { get; set; }
        public virtual DbSet<Device> Devices { get; set; }
        public virtual DbSet<DeviceConfiguration> DeviceConfigurations { get; set; }
        public virtual DbSet<Doctor> Doctors { get; set; }
        public virtual DbSet<ExternalSource> ExternalSources { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<Note> Notes { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<NotificationRule> NotificationRules { get; set; }
        public virtual DbSet<NotificationType> NotificationTypes { get; set; }
        public virtual DbSet<Order_tbl> Order_tbl { get; set; }
        public virtual DbSet<OrderStatu> OrderStatus { get; set; }
        public virtual DbSet<Patient_tbl> Patient_tbl { get; set; }
        public virtual DbSet<Pin> Pins { get; set; }
        public virtual DbSet<Procedure> Procedures { get; set; }
        public virtual DbSet<ProcedureCategory> ProcedureCategories { get; set; }
        public virtual DbSet<RfidDetection> RfidDetections { get; set; }
        public virtual DbSet<RfidDetector> RfidDetectors { get; set; }
        public virtual DbSet<RfidDirection> RfidDirections { get; set; }
        public virtual DbSet<Room> Rooms { get; set; }
        public virtual DbSet<Staging_Admission> Staging_Admission { get; set; }
        public virtual DbSet<Staging_Order> Staging_Order { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Update> Updates { get; set; }
        public virtual DbSet<WaitingArea> WaitingAreas { get; set; }
        public virtual DbSet<tbl_sample> tbl_sample { get; set; }
    
        public virtual int InsertUpdateAdmission(Nullable<int> externalSourceId, string externalId, Nullable<System.DateTime> admitDateTime, Nullable<System.DateTime> dischargeDateTime, Nullable<int> patientId, Nullable<int> primaryCareDoctor_doctorId, Nullable<int> attendingDoctor_doctorId, Nullable<int> admittingDoctor_doctorId, Nullable<int> admissionType_admissionTypeId, Nullable<int> admissionStatus_admissionStatusId, Nullable<int> location_locationId, Nullable<int> bed_bedId, string source)
        {
            var externalSourceIdParameter = externalSourceId.HasValue ?
                new ObjectParameter("externalSourceId", externalSourceId) :
                new ObjectParameter("externalSourceId", typeof(int));
    
            var externalIdParameter = externalId != null ?
                new ObjectParameter("externalId", externalId) :
                new ObjectParameter("externalId", typeof(string));
    
            var admitDateTimeParameter = admitDateTime.HasValue ?
                new ObjectParameter("admitDateTime", admitDateTime) :
                new ObjectParameter("admitDateTime", typeof(System.DateTime));
    
            var dischargeDateTimeParameter = dischargeDateTime.HasValue ?
                new ObjectParameter("dischargeDateTime", dischargeDateTime) :
                new ObjectParameter("dischargeDateTime", typeof(System.DateTime));
    
            var patientIdParameter = patientId.HasValue ?
                new ObjectParameter("patientId", patientId) :
                new ObjectParameter("patientId", typeof(int));
    
            var primaryCareDoctor_doctorIdParameter = primaryCareDoctor_doctorId.HasValue ?
                new ObjectParameter("PrimaryCareDoctor_doctorId", primaryCareDoctor_doctorId) :
                new ObjectParameter("PrimaryCareDoctor_doctorId", typeof(int));
    
            var attendingDoctor_doctorIdParameter = attendingDoctor_doctorId.HasValue ?
                new ObjectParameter("AttendingDoctor_doctorId", attendingDoctor_doctorId) :
                new ObjectParameter("AttendingDoctor_doctorId", typeof(int));
    
            var admittingDoctor_doctorIdParameter = admittingDoctor_doctorId.HasValue ?
                new ObjectParameter("AdmittingDoctor_doctorId", admittingDoctor_doctorId) :
                new ObjectParameter("AdmittingDoctor_doctorId", typeof(int));
    
            var admissionType_admissionTypeIdParameter = admissionType_admissionTypeId.HasValue ?
                new ObjectParameter("AdmissionType_admissionTypeId", admissionType_admissionTypeId) :
                new ObjectParameter("AdmissionType_admissionTypeId", typeof(int));
    
            var admissionStatus_admissionStatusIdParameter = admissionStatus_admissionStatusId.HasValue ?
                new ObjectParameter("AdmissionStatus_admissionStatusId", admissionStatus_admissionStatusId) :
                new ObjectParameter("AdmissionStatus_admissionStatusId", typeof(int));
    
            var location_locationIdParameter = location_locationId.HasValue ?
                new ObjectParameter("Location_locationId", location_locationId) :
                new ObjectParameter("Location_locationId", typeof(int));
    
            var bed_bedIdParameter = bed_bedId.HasValue ?
                new ObjectParameter("Bed_bedId", bed_bedId) :
                new ObjectParameter("Bed_bedId", typeof(int));
    
            var sourceParameter = source != null ?
                new ObjectParameter("source", source) :
                new ObjectParameter("source", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateAdmission", externalSourceIdParameter, externalIdParameter, admitDateTimeParameter, dischargeDateTimeParameter, patientIdParameter, primaryCareDoctor_doctorIdParameter, attendingDoctor_doctorIdParameter, admittingDoctor_doctorIdParameter, admissionType_admissionTypeIdParameter, admissionStatus_admissionStatusIdParameter, location_locationIdParameter, bed_bedIdParameter, sourceParameter);
        }
    
        public virtual int InsertUpdateGenerics(string extpatientId)
        {
            var extpatientIdParameter = extpatientId != null ?
                new ObjectParameter("extpatientId", extpatientId) :
                new ObjectParameter("extpatientId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateGenerics", extpatientIdParameter);
        }
    
        public virtual int InsertUpdateOrder(Nullable<int> externalSourceId, string externalId, string orderNumber, Nullable<System.DateTime> procedureTime, Nullable<int> orderStatusId, Nullable<System.DateTime> completedTime, Nullable<int> admissionId, string clinicalIndicator, Nullable<int> estimatedProcedureDuration, Nullable<int> procedure_procedureId, Nullable<int> department_locationId, Nullable<int> orderingDoctor_doctorId, Nullable<bool> isHidden, string source, string history, string diagnosis, string currentCardiologist, Nullable<bool> requiresSupervision, Nullable<bool> requiresFootwear, Nullable<bool> requiresMedicalRecords)
        {
            var externalSourceIdParameter = externalSourceId.HasValue ?
                new ObjectParameter("externalSourceId", externalSourceId) :
                new ObjectParameter("externalSourceId", typeof(int));
    
            var externalIdParameter = externalId != null ?
                new ObjectParameter("externalId", externalId) :
                new ObjectParameter("externalId", typeof(string));
    
            var orderNumberParameter = orderNumber != null ?
                new ObjectParameter("orderNumber", orderNumber) :
                new ObjectParameter("orderNumber", typeof(string));
    
            var procedureTimeParameter = procedureTime.HasValue ?
                new ObjectParameter("procedureTime", procedureTime) :
                new ObjectParameter("procedureTime", typeof(System.DateTime));
    
            var orderStatusIdParameter = orderStatusId.HasValue ?
                new ObjectParameter("orderStatusId", orderStatusId) :
                new ObjectParameter("orderStatusId", typeof(int));
    
            var completedTimeParameter = completedTime.HasValue ?
                new ObjectParameter("completedTime", completedTime) :
                new ObjectParameter("completedTime", typeof(System.DateTime));
    
            var admissionIdParameter = admissionId.HasValue ?
                new ObjectParameter("admissionId", admissionId) :
                new ObjectParameter("admissionId", typeof(int));
    
            var clinicalIndicatorParameter = clinicalIndicator != null ?
                new ObjectParameter("clinicalIndicator", clinicalIndicator) :
                new ObjectParameter("clinicalIndicator", typeof(string));
    
            var estimatedProcedureDurationParameter = estimatedProcedureDuration.HasValue ?
                new ObjectParameter("estimatedProcedureDuration", estimatedProcedureDuration) :
                new ObjectParameter("estimatedProcedureDuration", typeof(int));
    
            var procedure_procedureIdParameter = procedure_procedureId.HasValue ?
                new ObjectParameter("Procedure_procedureId", procedure_procedureId) :
                new ObjectParameter("Procedure_procedureId", typeof(int));
    
            var department_locationIdParameter = department_locationId.HasValue ?
                new ObjectParameter("Department_locationId", department_locationId) :
                new ObjectParameter("Department_locationId", typeof(int));
    
            var orderingDoctor_doctorIdParameter = orderingDoctor_doctorId.HasValue ?
                new ObjectParameter("OrderingDoctor_doctorId", orderingDoctor_doctorId) :
                new ObjectParameter("OrderingDoctor_doctorId", typeof(int));
    
            var isHiddenParameter = isHidden.HasValue ?
                new ObjectParameter("isHidden", isHidden) :
                new ObjectParameter("isHidden", typeof(bool));
    
            var sourceParameter = source != null ?
                new ObjectParameter("source", source) :
                new ObjectParameter("source", typeof(string));
    
            var historyParameter = history != null ?
                new ObjectParameter("history", history) :
                new ObjectParameter("history", typeof(string));
    
            var diagnosisParameter = diagnosis != null ?
                new ObjectParameter("diagnosis", diagnosis) :
                new ObjectParameter("diagnosis", typeof(string));
    
            var currentCardiologistParameter = currentCardiologist != null ?
                new ObjectParameter("currentCardiologist", currentCardiologist) :
                new ObjectParameter("currentCardiologist", typeof(string));
    
            var requiresSupervisionParameter = requiresSupervision.HasValue ?
                new ObjectParameter("requiresSupervision", requiresSupervision) :
                new ObjectParameter("requiresSupervision", typeof(bool));
    
            var requiresFootwearParameter = requiresFootwear.HasValue ?
                new ObjectParameter("requiresFootwear", requiresFootwear) :
                new ObjectParameter("requiresFootwear", typeof(bool));
    
            var requiresMedicalRecordsParameter = requiresMedicalRecords.HasValue ?
                new ObjectParameter("requiresMedicalRecords", requiresMedicalRecords) :
                new ObjectParameter("requiresMedicalRecords", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateOrder", externalSourceIdParameter, externalIdParameter, orderNumberParameter, procedureTimeParameter, orderStatusIdParameter, completedTimeParameter, admissionIdParameter, clinicalIndicatorParameter, estimatedProcedureDurationParameter, procedure_procedureIdParameter, department_locationIdParameter, orderingDoctor_doctorIdParameter, isHiddenParameter, sourceParameter, historyParameter, diagnosisParameter, currentCardiologistParameter, requiresSupervisionParameter, requiresFootwearParameter, requiresMedicalRecordsParameter);
        }
    }
}
